{"ast":null,"code":"import _classCallCheck from\"/Users/williamvennard/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/williamvennard/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";import*as d3 from\"d3\";function initKeyBindings(){document.addEventListener('keydown',function(event){if(event.key==='ArrowLeft'||event.key==='ArrowUp'||event.key==='ArrowRight'||event.key==='ArrowDown'){event.preventDefault();snakeGame.snakeDirection=directionHelper(event.key);}});document.addEventListener(\"touchstart\",touchHandler);}// makes sure you cant double back on yourself\nfunction directionHelper(direction){if(snakeGame.snakeDirection==='ArrowLeft'&&direction==='ArrowRight'){return snakeGame.snakeDirection;}if(snakeGame.snakeDirection==='ArrowRight'&&direction==='ArrowLeft'){return snakeGame.snakeDirection;}if(snakeGame.snakeDirection==='ArrowUp'&&direction==='ArrowDown'){return snakeGame.snakeDirection;}if(snakeGame.snakeDirection==='ArrowDown'&&direction==='ArrowUp'){return snakeGame.snakeDirection;}return direction;}// for mobile devices\nfunction touchHandler(e){e.preventDefault();if(e.touches){var width=e.view.innerWidth;var height=e.view.innerHeight;var x=e.touches[0].pageX;var y=e.touches[0].pageY;var direction;if(x<width/3){direction='ArrowLeft';}else if(x>width-width/3){direction='ArrowRight';}else if(y<height/3){direction='ArrowUp';}else{direction='ArrowDown';}snakeGame.snakeDirection=directionHelper(direction);}}var SnakeGame=/*#__PURE__*/function(){function SnakeGame(){_classCallCheck(this,SnakeGame);this.playing=false;this.count=0;this.foodCord=[];this.headCord=[];this.snakeBody=[];this.foodOnBoard=false;this.score=0;this.speed=200;this.snakeTail=[];this.snakeDirection='ArrowRight';this.lastSnakeDirection='';this.gameTicker=\"\";this.segmentDim=10;this.boardWidth=300;this.boardHeight=300;this.segmentRadius=5;}// Might be a better way to do this.\n// put into another class and simply reset?\n_createClass(SnakeGame,[{key:\"initGame\",value:function initGame(){d3.selectAll(\".game-intro\").remove();d3.select('#score').style(\"display\",\"block\");d3.select('#start-game').style(\"display\",\"none\");d3.select('#board').remove();d3.select('#end-text').remove();this.headCord=[0,0];this.snakeBody=[];this.score=0;this.speed=200;this.bombCount=0;this.snakeDirection='ArrowRight';this.snakeBody.push(this.headCord);this.playing=true;initKeyBindings();d3.select('#game-space').append('svg').attr('id','board').attr('width',this.boardWidth).attr('height',this.boardHeight).append('rect').attr('class','snake head').attr(\"id\",\"segment\"+(this.snakeBody.length-1)).attr('width',this.segmentDim).attr('height',this.segmentDim).attr('x',this.headCord[0]).attr('y',this.headCord[1]).attr(\"ry\",this.segmentRadius).attr(\"rx\",this.segmentRadius).attr('fill','red');// do this with d3\nd3.select('#score-count').text(this.score);d3.select('#pause-game').style(\"display\",\"block\");this.spawnFood();this.gameTick();}},{key:\"randomBoardCord\",value:function randomBoardCord(){var segDim=this.segmentDim;var x=Math.round(Math.random()*this.boardWidth/segDim)*segDim-segDim;var y=Math.round(Math.random()*this.boardHeight/segDim)*segDim-segDim;// keep food on map\nif(x>this.boardWidth){x=this.boardWidth-segDim;}if(x<0){x=0;}if(y>this.boardHeight){y=this.boardHeight-segDim;}if(y<0){y=0;}return[x,y];}},{key:\"spawnFood\",value:function spawnFood(){this.foodCord=this.randomBoardCord();d3.select('#board').append('rect').attr(\"id\",\"food\").attr(\"width\",this.segmentDim).attr(\"height\",this.segmentDim).attr(\"x\",this.foodCord[0]).attr(\"y\",this.foodCord[1]).attr(\"ry\",this.segmentRadius).attr(\"rx\",this.segmentRadius).attr(\"fill\",\"limegreen\").style(\"opacity\",0).transition().duration(1000).style(\"opacity\",1);this.foodOnBoard=true;}},{key:\"moveSnake\",value:function moveSnake(index,cord){d3.select('#segment'+index).attr(\"x\",cord[0]).attr(\"y\",cord[1]);if(+index!==this.snakeBody.length-1){var nextIdx=index+1;var oldCord=this.snakeBody[index];this.moveSnake(nextIdx,oldCord);}this.snakeBody[index]=[cord[0],cord[1]];}},{key:\"gameLost\",value:function gameLost(){clearTimeout(this.gameTicker);console.log('Game over.');if(!this.playing){return;}this.playing=false;// remove old stuff and show game over\nd3.select('#food').transition().duration(1000).style(\"opacity\",0).remove();d3.selectAll(\".snake\").transition().duration(1000).style(\"opacity\",0).remove();d3.select('#bomb-text').remove();d3.select('#bomb').transition().duration(1000).style(\"opacity\",0).remove();d3.select('#end-text').remove();d3.select('#game-space').append('h3').text('GAME OVER').attr('id','end-text').style(\"opacity\",0).transition().duration(1000).style(\"opacity\",1);d3.select('#pause-game').style(\"display\",\"none\");d3.select('#start-game').style(\"display\",\"block\");}},{key:\"gameTick\",value:function gameTick(){if(this.paused){return;}this.count++;if(this.snakeDirection==='ArrowLeft'){this.headCord[0]=this.headCord[0]-this.segmentDim;}else if(this.snakeDirection==='ArrowUp'){this.headCord[1]=this.headCord[1]-this.segmentDim;}else if(this.snakeDirection==='ArrowRight'){this.headCord[0]=this.headCord[0]+this.segmentDim;}else if(this.snakeDirection==='ArrowDown'){this.headCord[1]=this.headCord[1]+this.segmentDim;}//headCord = [0,0]\nthis.snakeTail=[this.snakeBody[this.snakeBody.length-1][0],this.snakeBody[this.snakeBody.length-1][1]];this.moveSnake(0,this.headCord);if(this.foodCord.length>0){if(this.foodCord[0]===this.headCord[0]&&this.foodCord[1]===this.headCord[1]){console.warn('FOOD EATEN!!!');this.score++;if(this.speed>100){this.speed=this.speed-10;}d3.select(\"#score-count\").text(this.score);d3.select('#food').remove();this.foodOnBoard=false;this.snakeBody.push(this.snakeTail);d3.select('#board').append('rect').attr(\"class\",\"snake\").attr(\"id\",\"segment\"+(this.snakeBody.length-1)).attr(\"width\",this.segmentDim).attr(\"height\",this.segmentDim).attr(\"x\",this.snakeTail[0]).attr(\"y\",this.snakeTail[1]).attr(\"ry\",this.segmentRadius).attr(\"rx\",this.segmentRadius).attr(\"fill\",\"purple\");}}if(this.count%5===0&&!this.foodOnBoard){this.spawnFood();}// put bomb stuff in seperate function\nif(this.snakeBombs===undefined){this.snakeBombs=new SnakeBombs(this);}// bomb tick\nif(this.snakeBombs.liveBomb){//console.log('This bomb is ticking...', this.snakeBombs.bombCount)\n// count down in seconds\nvar slowCount=Math.round(1000/this.speed);if(+this.snakeBombs.bombCount>0&&this.count%slowCount===1){this.snakeBombs.bombCount=this.snakeBombs.bombCount-1;d3.select('#bomb-text').text(this.snakeBombs.bombCount);}else if(this.snakeBombs.bombCount<=0){// boom\nconsole.log(\"Boom!\");this.snakeBombs.bombGoesBoom();}}// spawn bomb\nif(this.score>0&&this.count%10===0&&!this.snakeBombs.liveBomb){this.snakeBombs.spawnBomb();}// losing conditions\nif(this.headCord[0]>=this.boardWidth||this.headCord[0]<0// off the sides \n||this.headCord[1]<0||this.headCord[1]>=this.boardHeight){// off the top or bottom\nconsole.log('Snakes out of the box!');this.gameLost();return;}var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=this.snakeBody[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var segment=_step.value;if(this.snakeBody.indexOf(segment)===0){continue;}if(this.headCord[0]===segment[0]&&this.headCord[1]===segment[1]){console.log('You bit your own tail...');this.gameLost();return;}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return!=null){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}var that=this;this.gameTicker=setTimeout(function(){that.gameTick();},that.speed);}}]);return SnakeGame;}();var SnakeBombs=/*#__PURE__*/function(){function SnakeBombs(snakeGame){_classCallCheck(this,SnakeBombs);this.snakeGame=snakeGame;this.bombCord=[];this.liveBomb=false;this.bombCount=0;this.explosionRadius=2;}_createClass(SnakeBombs,[{key:\"spawnBomb\",value:function spawnBomb(){this.bombCord=this.snakeGame.randomBoardCord();this.bombCount=5;d3.select('#board').append('rect').attr(\"id\",\"bomb\").attr(\"width\",this.snakeGame.segmentDim).attr(\"height\",this.snakeGame.segmentDim).attr(\"x\",this.bombCord[0]).attr(\"y\",this.bombCord[1]).attr(\"ry\",this.snakeGame.segmentRadius).attr(\"rx\",this.snakeGame.segmentRadius).attr(\"fill\",\"orange\").style(\"opacity\",0).attr(\"stroke\",\"red\").transition().duration(1000).style(\"opacity\",1);d3.select('#board').append('text').attr('id','bomb-text').text(this.bombCount).style('fill','black').style('font-size','65%').attr(\"transform\",\"translate(\"+(this.bombCord[0]+this.snakeGame.segmentDim/4)+\",\"+(this.bombCord[1]+this.snakeGame.segmentDim-1)+\")\");this.liveBomb=true;}},{key:\"bombGoesBoom\",value:function bombGoesBoom(){var colorScale=d3.scaleLinear().domain([0,this.explosionRadius]).range(['red','yellow']);var explosionArea=[];for(var i=1;i<=this.explosionRadius;i++){var start=this.bombCord;for(var xDim=-i;xDim<=i;xDim++){for(var yDim=-i;yDim<=i;yDim++){var newX=start[0]+xDim*this.snakeGame.segmentDim;var newY=start[1]+yDim*this.snakeGame.segmentDim;var newCord=[newX,newY];if(!explosionArea.includes(newCord)){explosionArea.push(newCord);}}}}for(var _i=0,_explosionArea=explosionArea;_i<_explosionArea.length;_i++){var block=_explosionArea[_i];// distance in block units\nvar distance=distanceBetweenPoints(this.bombCord,block)/this.snakeGame.segmentDim;d3.select('#board').append('rect').attr(\"class\",\"boom\").attr(\"width\",this.snakeGame.segmentDim).attr(\"height\",this.snakeGame.segmentDim).attr(\"x\",block[0]).attr(\"y\",block[1]).attr(\"ry\",this.snakeGame.segmentRadius).attr(\"rx\",this.snakeGame.segmentRadius).attr(\"fill\",colorScale(distance)).style(\"opacity\",1).attr(\"stroke\",\"red\").transition().duration(1500).style(\"opacity\",0).attr(\"fill\",\"blue\").attr(\"width\",1).attr(\"height\",1).remove();}d3.select('#bomb-text').remove();d3.select('#bomb').transition().duration(1500).style(\"opacity\",0).remove();this.bombCount=0;this.liveBomb=false;this.isHeadInExplosion();}},{key:\"isHeadInExplosion\",value:function isHeadInExplosion(){var bombR=this.explosionRadius;var segDim=this.snakeGame.segmentDim;var explosionXRange=[this.bombCord[0]-segDim*bombR,this.bombCord[0]+segDim*bombR];var explosionYRange=[this.bombCord[1]-segDim*bombR,this.bombCord[1]+segDim*bombR];var detectX=this.snakeGame.headCord[0]>=explosionXRange[0]&&this.snakeGame.headCord[0]<=explosionXRange[1];var detectY=this.snakeGame.headCord[1]>=explosionYRange[0]&&this.snakeGame.headCord[1]<=explosionYRange[1];if(detectX&&detectY){console.log(\"Ouch, killed by a bomb...\");this.snakeGame.gameLost();}}}]);return SnakeBombs;}();function distanceBetweenPoints(pointA,pointB){var x0=pointA[0];var x1=pointB[0];var y0=pointA[1];var y1=pointB[1];var x=Math.pow(x1-x0,2);var y=Math.pow(y1-y0,2);var distance=Math.pow(x+y,0.5);return distance;}var snakeGame=new SnakeGame();export function startSnakeGame(){console.log('startSnakeGame: Start game!!');snakeGame.initGame();}export function pauseSnakeGame(){if(snakeGame.paused){snakeGame.paused=false;snakeGame.gameTick();}else{snakeGame.paused=true;}}","map":{"version":3,"sources":["/Users/williamvennard/my-app/src/SnakeApp.js"],"names":["d3","initKeyBindings","document","addEventListener","event","key","preventDefault","snakeGame","snakeDirection","directionHelper","touchHandler","direction","e","touches","width","view","innerWidth","height","innerHeight","x","pageX","y","pageY","SnakeGame","playing","count","foodCord","headCord","snakeBody","foodOnBoard","score","speed","snakeTail","lastSnakeDirection","gameTicker","segmentDim","boardWidth","boardHeight","segmentRadius","selectAll","remove","select","style","bombCount","push","append","attr","length","text","spawnFood","gameTick","segDim","Math","round","random","randomBoardCord","transition","duration","index","cord","nextIdx","oldCord","moveSnake","clearTimeout","console","log","paused","warn","snakeBombs","undefined","SnakeBombs","liveBomb","slowCount","bombGoesBoom","spawnBomb","gameLost","segment","indexOf","that","setTimeout","bombCord","explosionRadius","colorScale","scaleLinear","domain","range","explosionArea","i","start","xDim","yDim","newX","newY","newCord","includes","block","distance","distanceBetweenPoints","isHeadInExplosion","bombR","explosionXRange","explosionYRange","detectX","detectY","pointA","pointB","x0","x1","y0","y1","pow","startSnakeGame","initGame","pauseSnakeGame"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\n\nfunction initKeyBindings () {\n  document.addEventListener('keydown', (event) => {\n    if(event.key === 'ArrowLeft' || event.key === 'ArrowUp' || event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n      event.preventDefault();\n      snakeGame.snakeDirection = directionHelper(event.key)\n    }\n  });\n  document.addEventListener(\"touchstart\", touchHandler);\n}\n\n// makes sure you cant double back on yourself\nfunction directionHelper(direction) {\n  if (snakeGame.snakeDirection === 'ArrowLeft' && direction === 'ArrowRight') { return snakeGame.snakeDirection }\n  if (snakeGame.snakeDirection === 'ArrowRight' && direction === 'ArrowLeft') { return snakeGame.snakeDirection }\n  if (snakeGame.snakeDirection === 'ArrowUp' && direction=== 'ArrowDown') { return snakeGame.snakeDirection }\n  if (snakeGame.snakeDirection === 'ArrowDown' && direction === 'ArrowUp') { return snakeGame.snakeDirection }\n    return direction\n}\n\n// for mobile devices\nfunction touchHandler(e) {\n  e.preventDefault();\n  if(e.touches) {\n    let width = e.view.innerWidth;\n    let height = e.view.innerHeight;\n    let x = e.touches[0].pageX \n    let y = e.touches[0].pageY \n    let direction;\n    if (x<width/3) {\n      direction = 'ArrowLeft';\n    } else if (x>(width - width/3)) {\n      direction = 'ArrowRight';\n    } else if (y<height/3) {\n      direction = 'ArrowUp';\n    } else {\n      direction = 'ArrowDown';\n    }\n    snakeGame.snakeDirection = directionHelper(direction)\n  }\n}\n\nclass SnakeGame {\n  constructor() {\n    this.playing = false;\n    this.count = 0;\n    this.foodCord = [];\n    this.headCord = [];\n    this.snakeBody = [];\n    this.foodOnBoard = false;\n    this.score = 0;\n    this.speed = 200;\n    this.snakeTail = [];\n    this.snakeDirection = 'ArrowRight';\n    this.lastSnakeDirection = '';\n    this.gameTicker = \"\";\n    this.segmentDim = 10;\n    this.boardWidth = 300;\n    this.boardHeight = 300;\n    this.segmentRadius = 5;\n\n  }\n\n  // Might be a better way to do this.\n  // put into another class and simply reset?\n  initGame() {\n    d3.selectAll(\".game-intro\").remove();\n    d3.select('#score').style(\"display\", \"block\")\n    d3.select('#start-game').style(\"display\", \"none\")\n    d3.select('#board').remove();\n    d3.select('#end-text').remove();\n    this.headCord = [0,0];\n    this.snakeBody = [];\n    this.score = 0;\n    this.speed = 200;\n    this.bombCount = 0\n    this.snakeDirection = 'ArrowRight';\n    this.snakeBody.push(this.headCord);\n    this.playing = true;\n\n    initKeyBindings();\n\n    d3.select('#game-space')\n      .append('svg')\n      .attr('id', 'board')\n      .attr('width', this.boardWidth)\n      .attr('height', this.boardHeight)\n      .append('rect')\n      .attr('class', 'snake head')\n      .attr(\"id\", \"segment\" + (this.snakeBody.length-1))\n      .attr('width', this.segmentDim)\n      .attr('height', this.segmentDim)\n      .attr('x', this.headCord[0])\n      .attr('y', this.headCord[1])\n      .attr(\"ry\", this.segmentRadius)\n      .attr(\"rx\", this.segmentRadius)\n      .attr('fill', 'red')\n\n    // do this with d3\n    d3.select('#score-count')\n      .text(this.score)\n\n    d3.select('#pause-game')\n      .style(\"display\", \"block\")\n\n    this.spawnFood();\n    this.gameTick();\n  }\n\n  randomBoardCord() {\n    let segDim = this.segmentDim;\n    let x = (Math.round(Math.random()*this.boardWidth/segDim)*segDim) - segDim;\n    let y = (Math.round(Math.random()*this.boardHeight/segDim)*segDim) - segDim;\n    // keep food on map\n    if (x > this.boardWidth) { x = this.boardWidth - segDim}\n    if (x < 0) { x = 0 }\n    if (y > this.boardHeight) {y = this.boardHeight - segDim}\n    if (y < 0) { y = 0 }\n\n    return [x,y];\n  }\n\n  spawnFood() {\n    this.foodCord = this.randomBoardCord()\n\n    d3.select('#board').append('rect')\n      .attr(\"id\", \"food\")\n      .attr(\"width\", this.segmentDim)\n      .attr(\"height\", this.segmentDim)\n      .attr(\"x\", this.foodCord[0])\n      .attr(\"y\", this.foodCord[1])\n      .attr(\"ry\", this.segmentRadius)\n      .attr(\"rx\", this.segmentRadius)\n      .attr(\"fill\", \"limegreen\")\n      .style(\"opacity\", 0)\n      .transition()\n      .duration(1000)\n      .style(\"opacity\", 1)\n\n    this.foodOnBoard = true;\n  }\n\n  moveSnake(index, cord) {\n    d3.select('#segment' + index)\n      .attr(\"x\", cord[0])\n      .attr(\"y\", cord[1]);\n\n    if (+index !== this.snakeBody.length-1) {\n      let nextIdx = index + 1;\n      let oldCord = this.snakeBody[index];\n      this.moveSnake(nextIdx, oldCord)\n    }\n    this.snakeBody[index] = [cord[0], cord[1]];\n  }\n\n  gameLost() {\n    clearTimeout(this.gameTicker);\n    console.log('Game over.')\n    if(!this.playing) { return; }\n    this.playing = false;\n\n    // remove old stuff and show game over\n    d3.select('#food').transition()\n      .duration(1000)\n      .style(\"opacity\", 0)\n      .remove();\n\n    d3.selectAll(\".snake\").transition()\n      .duration(1000)\n      .style(\"opacity\", 0)\n      .remove();\n\n    d3.select('#bomb-text').remove();\n\n    d3.select('#bomb')\n      .transition()\n      .duration(1000)\n      .style(\"opacity\", 0)\n      .remove();\n\n    d3.select('#end-text').remove();\n    d3.select('#game-space')\n      .append('h3')\n      .text('GAME OVER')\n      .attr('id', 'end-text')\n      .style(\"opacity\", 0)\n      .transition()\n      .duration(1000)\n      .style(\"opacity\", 1)\n\n    d3.select('#pause-game')\n      .style(\"display\", \"none\")\n\n    d3.select('#start-game')\n      .style(\"display\", \"block\")\n      \n  }\n\n  gameTick() {\n    if(this.paused) {\n      return\n    }\n    this.count++;\n    if(this.snakeDirection === 'ArrowLeft') {\n      this.headCord[0] = this.headCord[0] - this.segmentDim;\n    }else if(this.snakeDirection === 'ArrowUp') {\n      this.headCord[1] = this.headCord[1] - this.segmentDim;\n    }else if(this.snakeDirection === 'ArrowRight') {\n      this.headCord[0] = this.headCord[0] + this.segmentDim;\n    }else if(this.snakeDirection === 'ArrowDown') {\n      this.headCord[1] = this.headCord[1] + this.segmentDim;\n    }\n    //headCord = [0,0]\n    this.snakeTail = [this.snakeBody[this.snakeBody.length-1][0], this.snakeBody[this.snakeBody.length-1][1]];\n\n    this.moveSnake(0, this.headCord);\n\n    if (this.foodCord.length > 0) {\n      if(this.foodCord[0] === this.headCord[0] && this.foodCord[1] === this.headCord[1]) {\n        console.warn('FOOD EATEN!!!')\n        this.score++;\n        if (this.speed > 100) {\n          this.speed = this.speed-10;\n        }\n\n        d3.select(\"#score-count\")\n          .text(this.score)\n\n        d3.select('#food').remove();\n        this.foodOnBoard = false;\n\n        this.snakeBody.push(this.snakeTail)\n\n        d3.select('#board').append('rect')\n          .attr(\"class\", \"snake\")\n          .attr(\"id\", \"segment\" + (this.snakeBody.length-1))\n          .attr(\"width\", this.segmentDim)\n          .attr(\"height\", this.segmentDim)\n          .attr(\"x\", this.snakeTail[0])\n          .attr(\"y\", this.snakeTail[1])\n          .attr(\"ry\", this.segmentRadius)\n          .attr(\"rx\", this.segmentRadius)\n          .attr(\"fill\", \"purple\");\n      }\n    }\n\n    if(this.count%5 === 0 && !this.foodOnBoard) {\n      this.spawnFood();\n    }\n\n    // put bomb stuff in seperate function\n    if(this.snakeBombs === undefined) {\n      this.snakeBombs = new SnakeBombs(this);\n    }\n\n    // bomb tick\n    if (this.snakeBombs.liveBomb) {\n      //console.log('This bomb is ticking...', this.snakeBombs.bombCount)\n      // count down in seconds\n      let slowCount = Math.round(1000/this.speed);\n      if (+this.snakeBombs.bombCount > 0 && this.count%slowCount === 1) {\n        this.snakeBombs.bombCount = this.snakeBombs.bombCount - 1;\n        d3.select('#bomb-text')\n          .text(this.snakeBombs.bombCount)\n      } else if (this.snakeBombs.bombCount <= 0){\n        // boom\n        console.log(\"Boom!\")\n        this.snakeBombs.bombGoesBoom();\n      }\n    }\n\n    // spawn bomb\n    if(this.score > 0 && this.count%10 === 0 && !this.snakeBombs.liveBomb) {\n      this.snakeBombs.spawnBomb();\n    }\n\n    // losing conditions\n    if(this.headCord[0] >= this.boardWidth || this.headCord[0] < 0 // off the sides \n      || this.headCord[1] < 0 || this.headCord[1] >= this.boardHeight) { // off the top or bottom\n      console.log('Snakes out of the box!')\n      this.gameLost();\n      return\n    }\n    for (let segment of this.snakeBody) {\n      if (this.snakeBody.indexOf(segment) === 0) {\n        continue\n      }\n      if(this.headCord[0] === segment[0] && this.headCord[1] === segment[1]) {\n        console.log('You bit your own tail...')\n        this.gameLost()\n        return\n      }\n    }\n\n    let that = this;\n    this.gameTicker = setTimeout(function() {\n      that.gameTick()\n    }, that.speed);\n  }\n\n}\n\nclass SnakeBombs {\n  constructor(snakeGame) {\n    this.snakeGame = snakeGame;\n\n    this.bombCord = [];\n    this.liveBomb = false;\n    this.bombCount = 0;\n    this.explosionRadius = 2;\n  }\n\n  spawnBomb() {\n    this.bombCord = this.snakeGame.randomBoardCord();\n    this.bombCount = 5;\n    d3.select('#board').append('rect')\n      .attr(\"id\", \"bomb\")\n      .attr(\"width\", this.snakeGame.segmentDim)\n      .attr(\"height\", this.snakeGame.segmentDim)\n      .attr(\"x\", this.bombCord[0])\n      .attr(\"y\", this.bombCord[1])\n      .attr(\"ry\", this.snakeGame.segmentRadius)\n      .attr(\"rx\", this.snakeGame.segmentRadius)\n      .attr(\"fill\", \"orange\")\n      .style(\"opacity\", 0)\n      .attr(\"stroke\", \"red\")\n      .transition()\n      .duration(1000)\n      .style(\"opacity\", 1)\n\n    d3.select('#board').append('text')\n      .attr('id', 'bomb-text')\n      .text(this.bombCount)\n      .style('fill', 'black')\n      .style('font-size', '65%')\n      .attr(\"transform\", \"translate(\"+(this.bombCord[0]+this.snakeGame.segmentDim/4)+\",\"+(this.bombCord[1]+this.snakeGame.segmentDim-1)+\")\");\n\n    this.liveBomb = true;\n  }\n\n  bombGoesBoom () {\n    \n    let colorScale = d3.scaleLinear()\n      .domain([0, this.explosionRadius])\n      .range(['red', 'yellow']);\n\n    let explosionArea = [];\n    for(let i = 1; i <= this.explosionRadius; i++) {\n      let start = this.bombCord;\n      for(let xDim = -i; xDim <= i; xDim++) {\n        for(let yDim = -i; yDim <= i; yDim++) {\n          let newX = start[0] + (xDim*this.snakeGame.segmentDim)\n          let newY = start[1] + (yDim*this.snakeGame.segmentDim)\n          let newCord = [newX, newY];\n          if(!explosionArea.includes(newCord)) {\n            explosionArea.push(newCord)\n          }\n        }\n      }\n    }\n    for(let block of explosionArea) {\n      // distance in block units\n      let distance = distanceBetweenPoints(this.bombCord, block)/this.snakeGame.segmentDim\n\n      d3.select('#board').append('rect')\n        .attr(\"class\", \"boom\")\n        .attr(\"width\", this.snakeGame.segmentDim)\n        .attr(\"height\", this.snakeGame.segmentDim)\n        .attr(\"x\", block[0])\n        .attr(\"y\", block[1])\n        .attr(\"ry\", this.snakeGame.segmentRadius)\n        .attr(\"rx\", this.snakeGame.segmentRadius)\n        .attr(\"fill\", colorScale(distance))\n        .style(\"opacity\", 1)\n        .attr(\"stroke\", \"red\")\n        .transition()\n        .duration(1500)\n        .style(\"opacity\", 0)\n        .attr(\"fill\", \"blue\")\n        .attr(\"width\", 1)\n        .attr(\"height\", 1)\n        .remove();\n    }\n\n    d3.select('#bomb-text').remove();\n    d3.select('#bomb')\n      .transition()\n      .duration(1500)\n      .style(\"opacity\", 0)\n      .remove();\n\n    this.bombCount = 0;\n    this.liveBomb = false;\n\n    this.isHeadInExplosion()\n  }\n\n  isHeadInExplosion() {\n    let bombR = this.explosionRadius;\n    let segDim = this.snakeGame.segmentDim;\n    let explosionXRange = [this.bombCord[0]-segDim*bombR, this.bombCord[0]+segDim*bombR];\n    let explosionYRange = [this.bombCord[1]-segDim*bombR, this.bombCord[1]+segDim*bombR];\n    let detectX = this.snakeGame.headCord[0] >= explosionXRange[0] && this.snakeGame.headCord[0] <= explosionXRange[1];\n    let detectY = this.snakeGame.headCord[1] >= explosionYRange[0] && this.snakeGame.headCord[1] <= explosionYRange[1];\n    if (detectX && detectY) {\n      console.log(\"Ouch, killed by a bomb...\")\n      this.snakeGame.gameLost();\n    }\n  }\n  \n}\n\nfunction distanceBetweenPoints (pointA, pointB) {\n  let x0 = pointA[0];\n  let x1 = pointB[0];\n  let y0 = pointA[1];\n  let y1 = pointB[1];\n  let x = Math.pow((x1-x0), 2);\n  let y = Math.pow((y1-y0), 2)\n  let distance = Math.pow((x + y), 0.5);\n\n  return distance;\n}\n\nlet snakeGame = new SnakeGame();\nexport function startSnakeGame() {\n  console.log('startSnakeGame: Start game!!')\n  snakeGame.initGame()\n}\n\nexport function pauseSnakeGame() {\n  if (snakeGame.paused) {\n    snakeGame.paused = false;\n    snakeGame.gameTick();\n  } else {\n    snakeGame.paused = true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}