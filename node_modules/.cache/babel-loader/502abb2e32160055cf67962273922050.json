{"ast":null,"code":"var _jsxFileName = \"/Users/williamvennard/my-app/src/Map.js\";\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\"; // import SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\n\nGeocode.setApiKey(\"AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I\");\nGeocode.enableDebug(); // searchBox\n\nconst _require = require(\"recompose\"),\n      compose = _require.compose,\n      withProps = _require.withProps,\n      lifecycle = _require.lifecycle;\n\nconst _require2 = require(\"react-google-maps/lib/components/places/StandaloneSearchBox\"),\n      StandaloneSearchBox = _require2.StandaloneSearchBox;\n\nconst PlacesWithStandaloneSearchBox = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I&v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: `400px`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  })\n}), lifecycle({\n  componentWillMount() {\n    const refs = {};\n    this.setState({\n      places: [],\n      onSearchBoxMounted: ref => {\n        refs.searchBox = ref;\n      },\n      onPlacesChanged: () => {\n        const places = refs.searchBox.getPlaces();\n        this.setState({\n          places\n        });\n      }\n    });\n  }\n\n}), withScriptjs)(props => React.createElement(\"div\", {\n  \"data-standalone-searchbox\": \"\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}, React.createElement(StandaloneSearchBox, {\n  ref: props.onSearchBoxMounted,\n  bounds: props.bounds,\n  onPlacesChanged: props.onPlacesChanged,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  placeholder: \"Customized your placeholder\",\n  style: {\n    boxSizing: `border-box`,\n    border: `1px solid transparent`,\n    width: `240px`,\n    height: `32px`,\n    padding: `0 12px`,\n    borderRadius: `3px`,\n    boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n    fontSize: `14px`,\n    outline: `none`,\n    textOverflow: `ellipses`\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n})), React.createElement(\"ol\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65\n  },\n  __self: this\n}, props.places.map(({\n  place_id,\n  formatted_address,\n  geometry: {\n    location\n  }\n}) => React.createElement(\"li\", {\n  key: place_id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}, formatted_address, \" at \", \"(\", location.lat(), \", \", location.lng(), \")\")))));\n\nconst AnyReactComponent = ({\n  text\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 80\n  },\n  __self: this\n}, text);\n\nclass SimpleMap extends Component {\n  render() {\n    return (// Important! Always set the container height explicitly\n      React.createElement(\"div\", {\n        style: {\n          height: '100vh',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(GoogleMap, {\n        bootstrapURLKeys: {\n          key: 'AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I'\n        },\n        defaultCenter: this.props.center,\n        defaultZoom: this.props.zoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(AnyReactComponent, {\n        lat: 59.955413,\n        lng: 30.337844,\n        text: \"My Marker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(PlacesWithStandaloneSearchBox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })))\n    );\n  }\n\n}\n\nSimpleMap.defaultProps = {\n  center: {\n    lat: 59.95,\n    lng: 30.33\n  },\n  zoom: 11\n};\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      console.warn(\"getCity: addressArray\", addressArray);\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {\n      console.warn(\"Infow window has been closed!!!\", event);\n    };\n\n    this.onPlaceSelected = place => {\n      console.warn(\"place =\", place);\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n\n\n  componentDidMount() {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      let that = this;\n      navigator.geolocation.getCurrentPosition(function (position) {\n        that.state.mapPosition.lat = position.coords.latitude;\n        that.state.mapPosition.lng = position.coords.longitude;\n        that.next();\n      }, function () {\n        console.warn(\"getCurrentPosition: Error!\");\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      console.warn(\"Browser doesn't support Geolocation\");\n    }\n  }\n\n  next() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n    * Get the city and set the city input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0,\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 368\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height,\n            width: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          'marginTop': `50px`,\n          'marginBottom': `50px`\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }))), React.createElement(SimpleMap, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/williamvennard/my-app/src/Map.js"],"names":["React","ReactDOM","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","require","compose","withProps","lifecycle","StandaloneSearchBox","PlacesWithStandaloneSearchBox","googleMapURL","loadingElement","height","containerElement","componentWillMount","refs","setState","places","onSearchBoxMounted","ref","searchBox","onPlacesChanged","getPlaces","props","bounds","boxSizing","border","width","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","map","place_id","formatted_address","geometry","location","lat","lng","AnyReactComponent","text","SimpleMap","Component","render","key","center","zoom","defaultProps","Map","constructor","getCity","addressArray","console","warn","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","address_components","latValue","lngValue","markerPosition","mapPosition","onMarkerDragEnd","log","newLat","latLng","newLng","fromLatLng","then","response","results","error","componentDidMount","navigator","geolocation","that","getCurrentPosition","position","coords","latitude","longitude","next","shouldComponentUpdate","nextProps","nextState","AsyncMap","google","margin","color","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from \"react-dom\";\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\n// import SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\nGeocode.setApiKey(\"AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I\");\nGeocode.enableDebug();\n\n// searchBox\nconst { compose, withProps, lifecycle } = require(\"recompose\");\nconst { StandaloneSearchBox } = require(\"react-google-maps/lib/components/places/StandaloneSearchBox\");\n\nconst PlacesWithStandaloneSearchBox = compose(\n  withProps({\n    googleMapURL:\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I&v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />\n  }),\n  lifecycle({\n    componentWillMount() {\n      const refs = {};\n      this.setState({\n        places: [],\n        onSearchBoxMounted: ref => {\n          refs.searchBox = ref;\n        },\n        onPlacesChanged: () => {\n          const places = refs.searchBox.getPlaces();\n\n          this.setState({\n            places\n          });\n        }\n      });\n    }\n  }),\n  withScriptjs\n)(props => (\n  <div data-standalone-searchbox=\"\">\n    <StandaloneSearchBox\n      ref={props.onSearchBoxMounted}\n      bounds={props.bounds}\n      onPlacesChanged={props.onPlacesChanged}\n    >\n      <input\n        type=\"text\"\n        placeholder=\"Customized your placeholder\"\n        style={{\n          boxSizing: `border-box`,\n          border: `1px solid transparent`,\n          width: `240px`,\n          height: `32px`,\n          padding: `0 12px`,\n          borderRadius: `3px`,\n          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n          fontSize: `14px`,\n          outline: `none`,\n          textOverflow: `ellipses`\n        }}\n      />\n    </StandaloneSearchBox>\n    \n    <ol>\n      {props.places.map(\n        ({ place_id, formatted_address, geometry: { location } }) => (\n          <li key={place_id}>\n            {formatted_address}\n            {\" at \"}\n            ({location.lat()}, {location.lng()})\n          </li>\n        )\n      )}\n    </ol>\n  </div>\n));\n\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nclass SimpleMap extends Component {\n  static defaultProps = {\n    center: {\n      lat: 59.95,\n      lng: 30.33\n    },\n    zoom: 11\n  };\n\n  render() {\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: '100vh', width: '100%' }}>\n        <GoogleMap\n          bootstrapURLKeys={{ key: 'AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I' }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n        >\n          <AnyReactComponent\n            lat={59.955413}\n            lng={30.337844}\n            text=\"My Marker\"\n          />\n          <PlacesWithStandaloneSearchBox/>\n        </GoogleMap>\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\nclass Map extends React.Component{\n  constructor(props){\n    super( props );\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    }\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n  componentDidMount() {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      let that = this;\n      navigator.geolocation.getCurrentPosition(function(position) {\n        that.state.mapPosition.lat = position.coords.latitude;\n        that.state.mapPosition.lng = position.coords.longitude;\n        that.next()\n      }, function() {\n        console.warn(\"getCurrentPosition: Error!\")\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      console.warn(\"Browser doesn't support Geolocation\")\n    }\n\n    \n  };\n\n  next() {\n    Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n      response => {\n        const address = response.results[0].formatted_address,\n        addressArray =  response.results[0].address_components,\n        city = this.getCity( addressArray ),\n        area = this.getArea( addressArray ),\n        state = this.getState( addressArray );\n        console.log( 'city', city, area, state );\n    \n        this.setState( {\n          address: ( address ) ? address : '',\n          area: ( area ) ? area : '',\n          city: ( city ) ? city : '',\n          state: ( state ) ? state : '',\n        } )\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate( nextProps, nextState ){\n    if (\n      this.state.markerPosition.lat !== this.props.center.lat ||\n      this.state.address !== nextState.address ||\n      this.state.city !== nextState.city ||\n      this.state.area !== nextState.area ||\n      this.state.state !== nextState.state\n    ) {\n      return true\n    } else if ( this.props.center.lat === nextProps.center.lat ){\n      return false\n    }\n  }\n  /**\n    * Get the city and set the city input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getCity = ( addressArray ) => {\n    console.warn(\"getCity: addressArray\", addressArray)\n    let city = '';\n    for( let i = 0; i < addressArray.length; i++ ) {\n      if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\n        city = addressArray[ i ].long_name;\n        return city;\n      }\n    }\n  };\n  /**\n    * Get the area and set the area input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getArea = ( addressArray ) => {\n    let area = '';\n    for( let i = 0; i < addressArray.length; i++ ) {\n      if ( addressArray[ i ].types[0]  ) {\n        for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n          if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n            area = addressArray[ i ].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n  /**\n    * Get the address and set the address input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getState = ( addressArray ) => {\n    let state = '';\n    for( let i = 0; i < addressArray.length; i++ ) {\n      for( let i = 0; i < addressArray.length; i++ ) {\n        if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\n          state = addressArray[ i ].long_name;\n          return state;\n        }\n      }\n    }\n  };\n  /**\n    * And function for city,state and address input\n    * @param event\n    */\n  onChange = ( event ) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  /**\n    * This Event triggers when the marker window is closed\n    *\n    * @param event\n    */\n  onInfoWindowClose = ( event ) => {\n    console.warn(\"Infow window has been closed!!!\", event)\n  };\n  /**\n    * When the user types an address in the search box\n    * @param place\n    */\n  onPlaceSelected = ( place ) => {\n    console.warn(\"place =\", place)\n    const address = place.formatted_address,\n    addressArray =  place.address_components,\n    city = this.getCity( addressArray ),\n    area = this.getArea( addressArray ),\n    state = this.getState( addressArray ),\n    latValue = place.geometry.location.lat(),\n    lngValue = place.geometry.location.lng();\n    // Set these values in the state.\n    this.setState({\n      address: ( address ) ? address : '',\n      area: ( area ) ? area : '',\n      city: ( city ) ? city : '',\n      state: ( state ) ? state : '',\n      markerPosition: {\n      lat: latValue,\n      lng: lngValue\n    },\n      mapPosition: {\n        lat: latValue,\n        lng: lngValue\n      },\n    })\n  };\n  /**\n    * When the marker is dragged you get the lat and long using the functions available from event object.\n    * Use geocode to get the address, city, area and state from the lat and lng positions.\n    * And then set those values in the state.\n    *\n    * @param event\n    */\n  onMarkerDragEnd = ( event ) => {\n    console.log( 'event', event );\n    let newLat = event.latLng.lat(),\n    newLng = event.latLng.lng(),\n    addressArray = [];\n    Geocode.fromLatLng( newLat , newLng ).then(\n      response => {\n        const address = response.results[0].formatted_address,\n        addressArray =  response.results[0].address_components,\n        city = this.getCity( addressArray ),\n        area = this.getArea( addressArray ),\n        state = this.getState( addressArray );\n        this.setState( {\n          address: ( address ) ? address : '',\n          area: ( area ) ? area : '',\n          city: ( city ) ? city : '',\n          state: ( state ) ? state : ''\n        } )\n      },\n     error => {\n      console.error(error);\n     }\n    );\n  };\n  render(){\n    const AsyncMap = withScriptjs(\n      withGoogleMap(\n        props => (\n          <GoogleMap google={ this.props.google }\n            defaultZoom={ this.props.zoom }\n            defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n          >\n            \n            \n\n            <Marker \n              google={ this.props.google }\n              name={'Dolores park'}\n              draggable={true}\n              onDragEnd={ this.onMarkerDragEnd }\n              position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n            />\n            <Marker />\n            <InfoWindow\n              onClose={ this.onInfoWindowClose }\n              position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\n            >\n              <div>\n                <span style={{ padding: 0, margin: 0, color: 'black'}}>{ this.state.address }</span>\n              </div>\n            </InfoWindow>\n          </GoogleMap>\n        )\n      )\n    );\n    let map;\n    if( this.props.center.lat !== undefined ) {\n      map = <div className=\"col\">\n        <AsyncMap\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I&libraries=places\"\n          loadingElement={\n            <div style={{ height: `100%` }} />\n          }\n          containerElement={\n            <div style={{ height: this.props.height, width: `100%` }} />\n          }\n          mapElement={\n            <div style={{ height: `100%` }} />\n          }\n        />\n        <div style={{ 'marginTop': `50px`, 'marginBottom': `50px` }}>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">City</label>\n            <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">Area</label>\n            <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">State</label>\n            <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">Address</label>\n            <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n          </div>\n        </div>\n        <SimpleMap/>\n      </div>\n    } else {\n      map = <div style={{ height: this.props.height }} />\n    }\n    return( map )\n  }\n}\nexport default Map\n"]},"metadata":{},"sourceType":"module"}