{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n/**\n * load_environment_variables_from_file does exactly what its name suggests\n * attempts to load a file containing a list of enviroment variables\n * @param {String} filepath - the path to your env.json or .env file\n * try/catch has a nice stack trace if we fail to find/load your the file\n */\n\n\nmodule.exports = function load_environment_variables_from_file(filepath) {\n  try {\n    // first we determine how to find the env.json or config.env file\n    var module_callee = module.parent.id;\n    var called_by_module = module_callee.indexOf('node_modules');\n    var parent_directory = module_callee.slice(0, called_by_module);\n\n    if (filepath) {\n      // if required without a config.env file we search for one!\n      if (called_by_module > -1) {\n        filepath = path.resolve(parent_directory, filepath);\n      } else {\n        filepath = path.resolve(filepath);\n      }\n    } else {\n      // https://github.com/dwyl/env2/issues/6\n      var dir = fs.readdirSync(parent_directory); // list of files in dir\n\n      dir.forEach(function (file) {\n        // search for a .env file in dir\n        if (file.indexOf('.env') > -1) {\n          // found a .env file? use it!\n          filepath = parent_directory + file;\n        }\n      });\n    }\n\n    var env_getter = filepath.indexOf('.env') !== -1 ? get_dot_env : get_JSON;\n    var env = env_getter(filepath);\n    Object.keys(env).forEach(function (k) {\n      if (!process.env[k]) {\n        // allow enviroment to take precedence over env.json\n        process.env[k] = env[k]; // only set if not set by environment\n      }\n    });\n  } catch (error) {\n    var is_enoent = error.message && error.message.indexOf('ENOENT') !== -1;\n    var message_detail = is_enoent ? ' NOT FOUND! ' : ' INVALID JSON! '; // we're defining our own styles to avoid dependencies.\n    // if you are curious how this works see: github.com/chalk/ansi-styles\n\n    var reset = '\\u001b[22m';\n    var bold = '\\u001b[1m';\n    var cyanBg = '\\u001b[46m' + '\\u001b[30m'; // Background Cyan Font Black\n\n    var greenBg = '\\u001b[42m' + '\\u001b[30m'; // Background Green Font Black\n\n    var warning = '\\u001b[43m' + '\\u001b[30m'; // Background Green Font Black\n\n    var endStyle = '\\u001b[49m' + '\\u001b[39m' + '\\u001b[22m'; // reset terminal\n\n    var msg = bold + warning + ' WARNING: ' + reset;\n    msg += greenBg + ' env2 was required to load an .env file: ';\n    msg += cyanBg + ' ' + filepath + ' ' + bold + warning + message_detail;\n    msg += reset + greenBg + ' ';\n    msg += 'Please see: http://git.io/vG3UZ' + endStyle;\n    console.warn(msg);\n    return msg;\n  }\n};\n\nfunction get_dot_env(filepath) {\n  return make_json_from_dot(fs.readFileSync(path.resolve(filepath), 'utf8'));\n}\n\nfunction make_json_from_dot(dot_env) {\n  return dot_env.split('\\n').map(trim).filter(function (line) {\n    return line.length;\n  }).filter(isNotComment).reduce(add_dot_env_line_to_json, {});\n}\n\nfunction trim(string) {\n  return string.trim();\n}\n\nfunction isNotComment(line) {\n  return line[0] !== '#';\n}\n\nfunction get_JSON(path) {\n  return JSON.parse(fs.readFileSync(path));\n}\n\nfunction add_dot_env_line_to_json(json, env_variable) {\n  var environment_parts = env_variable.replace('export', '').split('=');\n  json[environment_parts[0].trim()] = environment_parts.slice(1).join('=').trim();\n  return json;\n}\n\nexports.version = require('../package.json').version;","map":{"version":3,"sources":["/Users/williamvennard/my-app/node_modules/env2/lib/env.js"],"names":["fs","require","path","module","exports","load_environment_variables_from_file","filepath","module_callee","parent","id","called_by_module","indexOf","parent_directory","slice","resolve","dir","readdirSync","forEach","file","env_getter","get_dot_env","get_JSON","env","Object","keys","k","process","error","is_enoent","message","message_detail","reset","bold","cyanBg","greenBg","warning","endStyle","msg","console","warn","make_json_from_dot","readFileSync","dot_env","split","map","trim","filter","line","length","isNotComment","reduce","add_dot_env_line_to_json","string","JSON","parse","json","env_variable","environment_parts","replace","join","version"],"mappings":"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","sourcesContent":["var fs   = require('fs');\nvar path = require('path');\n\n/**\n * load_environment_variables_from_file does exactly what its name suggests\n * attempts to load a file containing a list of enviroment variables\n * @param {String} filepath - the path to your env.json or .env file\n * try/catch has a nice stack trace if we fail to find/load your the file\n */\nmodule.exports = function load_environment_variables_from_file (filepath) {\n  try { // first we determine how to find the env.json or config.env file\n    var module_callee    = module.parent.id;\n    var called_by_module = module_callee.indexOf('node_modules');\n    var parent_directory = module_callee.slice(0,called_by_module);\n    if(filepath) { // if required without a config.env file we search for one!\n      if(called_by_module > -1){\n        filepath = path.resolve(parent_directory, filepath);\n      }\n      else {\n        filepath = path.resolve(filepath);\n      }\n    }\n    else { // https://github.com/dwyl/env2/issues/6\n      var dir = fs.readdirSync(parent_directory); // list of files in dir\n      dir.forEach(function(file) {  // search for a .env file in dir\n        if(file.indexOf('.env') > -1) { // found a .env file? use it!\n          filepath = parent_directory + file;\n        }\n      })\n    }\n    var env_getter = filepath.indexOf('.env') !== -1 ? get_dot_env : get_JSON;\n    var env = env_getter(filepath);\n    Object.keys(env).forEach(function(k) {\n      if(!process.env[k]) { // allow enviroment to take precedence over env.json\n        process.env[k] = env[k]; // only set if not set by environment\n      }\n    });\n  }\n  catch (error) {\n    var is_enoent = error.message && error.message.indexOf('ENOENT') !== -1\n    var message_detail = is_enoent ? ' NOT FOUND! ' : ' INVALID JSON! '\n    // we're defining our own styles to avoid dependencies.\n    // if you are curious how this works see: github.com/chalk/ansi-styles\n    var reset    = '\\u001b[22m';\n    var bold     = '\\u001b[1m';\n    var cyanBg   = '\\u001b[46m' + '\\u001b[30m'; // Background Cyan Font Black\n    var greenBg  = '\\u001b[42m' + '\\u001b[30m'; // Background Green Font Black\n    var warning  = '\\u001b[43m' + '\\u001b[30m'; // Background Green Font Black\n    var endStyle = '\\u001b[49m' + '\\u001b[39m' + '\\u001b[22m'; // reset terminal\n\n    var msg = bold + warning + ' WARNING: ' + reset\n    msg    += greenBg + ' env2 was required to load an .env file: '\n    msg    += cyanBg + ' ' + filepath + ' ' + bold + warning + message_detail\n    msg    += reset + greenBg +' '\n    msg    += 'Please see: http://git.io/vG3UZ'+ endStyle\n\n    console.warn(msg);\n    return msg;\n  }\n};\n\nfunction get_dot_env (filepath) {\n  return make_json_from_dot(fs.readFileSync(path.resolve(filepath), 'utf8'));\n}\n\nfunction make_json_from_dot (dot_env) {\n  return dot_env.split('\\n')\n      .map(trim)\n      .filter(function(line){ return line.length; })\n      .filter(isNotComment)\n      .reduce(add_dot_env_line_to_json, {});\n}\n\nfunction trim (string) {\n  return string.trim();\n}\n\nfunction isNotComment (line) {\n  return line[0] !== '#';\n}\n\nfunction get_JSON (path) {\n  return JSON.parse(fs.readFileSync(path))\n}\n\nfunction add_dot_env_line_to_json (json, env_variable) {\n  var environment_parts = env_variable.replace('export','').split('=');\n  json[environment_parts[0].trim()] = environment_parts.slice(1).join('=').trim();\n  return json;\n}\n\nexports.version = require('../package.json').version;\n"]},"metadata":{},"sourceType":"script"}