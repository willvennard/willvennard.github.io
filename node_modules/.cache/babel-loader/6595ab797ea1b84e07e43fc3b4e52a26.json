{"ast":null,"code":"import * as d3 from \"d3\"; // snake\n\nlet gameTicker;\nlet playing = false;\nlet count = 0;\nconst segmentDim = 10;\nconst boardWidth = 300;\nconst boardHeight = 300;\nconst segmentRadius = 5;\nlet foodCord = [];\nlet headCord = [];\nlet snakeBody = [];\nlet foodOnBoard = false;\nlet score = 0;\nlet speed = 200;\nlet snakeTail = [];\nlet snakeDirection = 'ArrowRight';\nlet lastSnakeDirection = ''; // bomb stuff\n\nlet bombCord = [];\nlet liveBomb = false;\nlet bombCount = 0;\nlet bombRadius = 2;\nexport function startSnakeGame() {\n  console.log('startSnakeGame: Start game!!');\n  initGame();\n  playing = true;\n}\ndocument.addEventListener('keydown', event => {\n  if (event.key === 'ArrowLeft' || event.key === 'ArrowUp' || event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n    event.preventDefault();\n\n    if (snakeDirection === 'ArrowLeft' && event.key === 'ArrowRight') {\n      return;\n    }\n\n    if (snakeDirection === 'ArrowRight' && event.key === 'ArrowLeft') {\n      return;\n    }\n\n    if (snakeDirection === 'ArrowUp' && event.key === 'ArrowDown') {\n      return;\n    }\n\n    if (snakeDirection === 'ArrowDown' && event.key === 'ArrowUp') {\n      return;\n    }\n\n    snakeDirection = event.key;\n  }\n});\n\nfunction initGame() {\n  d3.select('#score').style(\"display\", \"block\");\n  d3.select('#start-game').style(\"display\", \"none\");\n  d3.select('#board').remove();\n  d3.select('#end-text').remove();\n  headCord = [0, 0];\n  snakeBody = [];\n  score = 0;\n  speed = 200;\n  bombCount = 0;\n  snakeDirection = 'ArrowRight';\n  snakeBody.push(headCord);\n  clearTimeout(gameTicker);\n  d3.select('#game-space').append('svg').attr('id', 'board').attr('width', boardWidth).attr('height', boardHeight).append('rect').attr('class', 'snake head').attr(\"id\", \"segment\" + (snakeBody.length - 1)).attr('width', segmentDim).attr('height', segmentDim).attr('x', headCord[0]).attr('y', headCord[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr('fill', 'red'); // do this with d3\n\n  d3.select('#score-count').text(score);\n  spawnFood();\n  gameTick();\n}\n\nfunction randomBoardCord() {\n  let x = Math.round(Math.random() * boardWidth / segmentDim) * segmentDim - segmentDim;\n  let y = Math.round(Math.random() * boardHeight / segmentDim) * segmentDim - segmentDim; // keep food on map\n\n  if (x > boardWidth) {\n    x = boardWidth - segmentDim;\n  }\n\n  if (x < 0) {\n    x = 0;\n  }\n\n  if (y > boardHeight) {\n    y = boardHeight - segmentDim;\n  }\n\n  if (y < 0) {\n    y = 0;\n  }\n\n  return [x, y];\n}\n\nfunction spawnFood() {\n  foodCord = randomBoardCord();\n  d3.select('#board').append('rect').attr(\"id\", \"food\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", foodCord[0]).attr(\"y\", foodCord[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", \"limegreen\").style(\"opacity\", 0).transition().duration(1000).style(\"opacity\", 1);\n  foodOnBoard = true;\n}\n\nfunction spawnBomb() {\n  bombCord = randomBoardCord();\n  bombCount = 5;\n  d3.select('#board').append('rect').attr(\"id\", \"bomb\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", bombCord[0]).attr(\"y\", bombCord[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", \"orange\").style(\"opacity\", 0).attr(\"stroke\", \"red\").transition().duration(1000).style(\"opacity\", 1);\n  d3.select('#board').append('text').attr('id', 'bomb-text').text(bombCount).style('fill', 'black').style('font-size', '65%').attr(\"transform\", \"translate(\" + (bombCord[0] + segmentDim / 4) + \",\" + (bombCord[1] + segmentDim - 1) + \")\");\n  liveBomb = true;\n}\n\nfunction moveSnake(index, cord) {\n  d3.select('#segment' + index).attr(\"x\", cord[0]).attr(\"y\", cord[1]);\n\n  if (+index !== snakeBody.length - 1) {\n    let nextIdx = index + 1;\n    let oldCord = snakeBody[index];\n    moveSnake(nextIdx, oldCord);\n  }\n\n  snakeBody[index] = [cord[0], cord[1]];\n}\n\nfunction gameLost() {\n  clearTimeout(gameTicker);\n  console.warn('Game over.'); // remove old stuff and show game over\n\n  d3.select('#food').transition().duration(1000).style(\"opacity\", 0).remove();\n  d3.selectAll(\".snake\").transition().duration(1000).style(\"opacity\", 0).remove();\n  d3.select('#bomb-text').remove();\n  d3.select('#bomb').transition().duration(1000).style(\"opacity\", 0).remove();\n  d3.select('#game-space').append('h3').text('GAME OVER').attr('id', 'end-text').style(\"opacity\", 0).transition().duration(1000).style(\"opacity\", 1);\n  d3.select('#start-game').style(\"display\", \"block\");\n}\n\nfunction bombGoesBoom() {\n  let explosion = [];\n  let colorScale = d3.scaleLinear().domain([1, bombRadius]).range(['red', 'yellow']);\n\n  for (let i = 1; i <= bombRadius; i++) {\n    let cord = [bombCord[0] + segmentDim, bombCord[1]];\n    explosion.push(cord); // right\n\n    d3.select('#board').append('rect').attr(\"class\", \"boom\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", bombCord[0] + segmentDim * i).attr(\"y\", bombCord[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", colorScale(i)).style(\"opacity\", 1).attr(\"stroke\", \"red\").transition().duration(1500).style(\"opacity\", 0).remove(); // left\n\n    d3.select('#board').append('rect').attr(\"class\", \"boom\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", bombCord[0] - segmentDim * i).attr(\"y\", bombCord[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", colorScale(i)).style(\"opacity\", 1).attr(\"stroke\", \"red\").transition().duration(1500).style(\"opacity\", 0).remove();\n    d3.select('#board').append('rect').attr(\"class\", \"boom\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", bombCord[0]).attr(\"y\", bombCord[1] + segmentDim * i).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", colorScale(i)).style(\"opacity\", 1).attr(\"stroke\", \"red\").transition().duration(1500).style(\"opacity\", 0).remove();\n    d3.select('#board').append('rect').attr(\"class\", \"boom\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", bombCord[0]).attr(\"y\", bombCord[1] - segmentDim * i).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", colorScale(i)).style(\"opacity\", 1).attr(\"stroke\", \"red\").transition().duration(1500).style(\"opacity\", 0).remove();\n  }\n\n  d3.select('#bomb-text').remove();\n  d3.select('#bomb').transition().duration(1500).style(\"opacity\", 0).remove();\n  bombCount = 0;\n  liveBomb = false; // ToDo:\n  // cut snake body if body within radius\n\n  isHeadInExplosion();\n}\n\nfunction isHeadInExplosion() {\n  let explosionXRange = [bombCord[0] - segmentDim * bombRadius, bombCord[0] + segmentDim * bombRadius];\n  let explosionYRange = [bombCord[1] - segmentDim * bombRadius, bombCord[1] + segmentDim * bombRadius];\n  let detectX = headCord[0] >= explosionXRange[0] && headCord[0] <= explosionXRange[1];\n  let detectY = headCord[1] >= explosionYRange[0] && headCord[1] <= explosionYRange[1];\n\n  if (detectX && detectY) {\n    console.log(\"Ouch, killed by a bomb...\");\n    gameLost();\n  }\n}\n\nfunction gameTick() {\n  count++;\n\n  if (snakeDirection === 'ArrowLeft') {\n    headCord[0] = headCord[0] - segmentDim;\n  } else if (snakeDirection === 'ArrowUp') {\n    headCord[1] = headCord[1] - segmentDim;\n  } else if (snakeDirection === 'ArrowRight') {\n    headCord[0] = headCord[0] + segmentDim;\n  } else if (snakeDirection === 'ArrowDown') {\n    headCord[1] = headCord[1] + segmentDim;\n  } //headCord = [0,0]\n\n\n  snakeTail = [snakeBody[snakeBody.length - 1][0], snakeBody[snakeBody.length - 1][1]];\n  moveSnake(0, headCord);\n\n  if (foodCord.length > 0) {\n    if (foodCord[0] === headCord[0] && foodCord[1] === headCord[1]) {\n      console.warn('FOOD EATEN!!!');\n      score++;\n\n      if (speed > 100) {\n        speed = speed - 25;\n      }\n\n      d3.select(\"#score-count\").text(score);\n      d3.select('#food').remove();\n      foodOnBoard = false;\n      snakeBody.push(snakeTail);\n      d3.select('#board').append('rect').attr(\"class\", \"snake\").attr(\"id\", \"segment\" + (snakeBody.length - 1)).attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", snakeTail[0]).attr(\"y\", snakeTail[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", \"purple\");\n    }\n  }\n\n  if (count % 5 === 0 && !foodOnBoard) {\n    spawnFood();\n  } // bomb tick\n\n\n  if (liveBomb) {\n    console.log('This bomb is ticking...', bombCount); // count down in seconds\n\n    let slowCount = Math.round(1000 / speed);\n\n    if (+bombCount > 0 && count % slowCount === 1) {\n      bombCount = bombCount - 1;\n      d3.select('#bomb-text').text(bombCount);\n    } else if (bombCount <= 0) {\n      // boom\n      console.warn(\"Boom!\");\n      bombGoesBoom();\n    }\n  } // spawn bomb\n\n\n  if (score > 0 && count % 10 === 0 && !liveBomb) {\n    spawnBomb();\n  } // losing conditions\n\n\n  if (headCord[0] > boardWidth || headCord[0] < 0 || headCord[1] < 0 || headCord[1] > boardHeight) {\n    console.warn('Snakes out of the box!');\n    gameLost();\n    return;\n  }\n\n  for (let segment of snakeBody) {\n    if (snakeBody.indexOf(segment) === 0) {\n      continue;\n    }\n\n    if (headCord[0] === segment[0] && headCord[1] === segment[1]) {\n      console.warn('You bit your own tail...');\n      gameLost();\n      return;\n    }\n  }\n\n  gameTicker = setTimeout(function () {\n    gameTick();\n  }, speed);\n}","map":{"version":3,"sources":["/Users/williamvennard/my-app/src/SnakeApp.js"],"names":["d3","gameTicker","playing","count","segmentDim","boardWidth","boardHeight","segmentRadius","foodCord","headCord","snakeBody","foodOnBoard","score","speed","snakeTail","snakeDirection","lastSnakeDirection","bombCord","liveBomb","bombCount","bombRadius","startSnakeGame","console","log","initGame","document","addEventListener","event","key","preventDefault","select","style","remove","push","clearTimeout","append","attr","length","text","spawnFood","gameTick","randomBoardCord","x","Math","round","random","y","transition","duration","spawnBomb","moveSnake","index","cord","nextIdx","oldCord","gameLost","warn","selectAll","bombGoesBoom","explosion","colorScale","scaleLinear","domain","range","i","isHeadInExplosion","explosionXRange","explosionYRange","detectX","detectY","slowCount","segment","indexOf","setTimeout"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\n// snake\nlet gameTicker;\nlet playing = false;\nlet count = 0;\nconst segmentDim = 10;\nconst boardWidth = 300;\nconst boardHeight = 300;\nconst segmentRadius = 5;\nlet foodCord = [];\n\nlet headCord = [];\nlet snakeBody = [];\nlet foodOnBoard = false;\nlet score = 0;\nlet speed = 200;\nlet snakeTail = [];\nlet snakeDirection = 'ArrowRight';\nlet lastSnakeDirection = '';\n// bomb stuff\nlet bombCord = [];\nlet liveBomb = false;\nlet bombCount = 0;\nlet bombRadius = 2;\n\nexport function startSnakeGame() {\n    console.log('startSnakeGame: Start game!!')\n    initGame()\n    playing = true;\n}\n\ndocument.addEventListener('keydown', (event) => {\n  if(event.key === 'ArrowLeft' || event.key === 'ArrowUp' || event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n    event.preventDefault();\n    if (snakeDirection === 'ArrowLeft' && event.key === 'ArrowRight') { return }\n    if (snakeDirection === 'ArrowRight' && event.key === 'ArrowLeft') { return }\n    if (snakeDirection === 'ArrowUp' && event.key === 'ArrowDown') { return }\n    if (snakeDirection === 'ArrowDown' && event.key === 'ArrowUp') { return }\n    snakeDirection = event.key;\n  }\n});\n\nfunction initGame() {\n  d3.select('#score')\n      .style(\"display\", \"block\")\n  d3.select('#start-game')\n      .style(\"display\", \"none\")\n  d3.select('#board').remove();\n  d3.select('#end-text').remove();\n  headCord = [0,0];\n  snakeBody = [];\n  score = 0;\n  speed = 200;\n  bombCount = 0\n  snakeDirection = 'ArrowRight';\n  snakeBody.push(headCord);\n  clearTimeout(gameTicker);\n\n  d3.select('#game-space')\n    .append('svg')\n    .attr('id', 'board')\n    .attr('width', boardWidth)\n    .attr('height', boardHeight)\n    .append('rect')\n    .attr('class', 'snake head')\n    .attr(\"id\", \"segment\" + (snakeBody.length-1))\n    .attr('width', segmentDim)\n    .attr('height', segmentDim)\n    .attr('x', headCord[0])\n    .attr('y', headCord[1])\n    .attr(\"ry\", segmentRadius)\n    .attr(\"rx\", segmentRadius)\n    .attr('fill', 'red')\n\n  // do this with d3\n  d3.select('#score-count')\n    .text(score)\n\n  spawnFood();\n  gameTick();\n}\n\nfunction randomBoardCord() {\n  let x = (Math.round(Math.random()*boardWidth/segmentDim)*segmentDim) - segmentDim;\n  let y = (Math.round(Math.random()*boardHeight/segmentDim)*segmentDim) - segmentDim;\n  // keep food on map\n  if (x > boardWidth) { x = boardWidth - segmentDim}\n  if (x < 0) { x = 0 }\n  if (y > boardHeight) {y = boardHeight - segmentDim}\n  if (y < 0) { y = 0 }\n\n  return [x,y];\n}\n\nfunction spawnFood() {\n  foodCord = randomBoardCord()\n\n  d3.select('#board').append('rect')\n    .attr(\"id\", \"food\")\n    .attr(\"width\", segmentDim)\n    .attr(\"height\", segmentDim)\n    .attr(\"x\", foodCord[0])\n    .attr(\"y\", foodCord[1])\n    .attr(\"ry\", segmentRadius)\n    .attr(\"rx\", segmentRadius)\n    .attr(\"fill\", \"limegreen\")\n    .style(\"opacity\", 0)\n    .transition()\n    .duration(1000)\n    .style(\"opacity\", 1)\n\n  foodOnBoard = true;\n}\n\nfunction spawnBomb() {\n  bombCord = randomBoardCord();\n  bombCount = 5;\n  d3.select('#board').append('rect')\n    .attr(\"id\", \"bomb\")\n    .attr(\"width\", segmentDim)\n    .attr(\"height\", segmentDim)\n    .attr(\"x\", bombCord[0])\n    .attr(\"y\", bombCord[1])\n    .attr(\"ry\", segmentRadius)\n    .attr(\"rx\", segmentRadius)\n    .attr(\"fill\", \"orange\")\n    .style(\"opacity\", 0)\n    .attr(\"stroke\", \"red\")\n    .transition()\n    .duration(1000)\n    .style(\"opacity\", 1)\n\n  d3.select('#board').append('text')\n    .attr('id', 'bomb-text')\n    .text(bombCount)\n    .style('fill', 'black')\n    .style('font-size', '65%')\n    .attr(\"transform\", \"translate(\"+(bombCord[0]+segmentDim/4)+\",\"+(bombCord[1]+segmentDim-1)+\")\");\n\n  liveBomb = true;\n}\n\nfunction moveSnake(index, cord) {\n  d3.select('#segment' + index)\n    .attr(\"x\", cord[0])\n    .attr(\"y\", cord[1]);\n\n  if (+index !== snakeBody.length-1) {\n    let nextIdx = index + 1;\n    let oldCord = snakeBody[index];\n    moveSnake(nextIdx, oldCord)\n  }\n  snakeBody[index] = [cord[0], cord[1]];\n}\n\nfunction gameLost() {\n  clearTimeout(gameTicker);\n  console.warn('Game over.')\n\n  // remove old stuff and show game over\n  d3.select('#food').transition()\n    .duration(1000)\n    .style(\"opacity\", 0)\n    .remove();\n\n  d3.selectAll(\".snake\").transition()\n    .duration(1000)\n    .style(\"opacity\", 0)\n    .remove();\n\n  d3.select('#bomb-text').remove();\n\n  d3.select('#bomb')\n    .transition()\n    .duration(1000)\n    .style(\"opacity\", 0)\n    .remove();\n\n  d3.select('#game-space')\n    .append('h3')\n    .text('GAME OVER')\n    .attr('id', 'end-text')\n    .style(\"opacity\", 0)\n    .transition()\n    .duration(1000)\n    .style(\"opacity\", 1)\n\n    d3.select('#start-game')\n      .style(\"display\", \"block\")\n    \n}\n\nfunction bombGoesBoom() {\n  let explosion = [];\n  let colorScale = d3.scaleLinear()\n    .domain([1, bombRadius])\n    .range(['red', 'yellow']);\n\n  for(let i = 1; i <= bombRadius; i++) {\n    let cord = [bombCord[0]+segmentDim, bombCord[1]]\n    explosion.push(cord)\n    // right\n    d3.select('#board').append('rect')\n      .attr(\"class\", \"boom\")\n      .attr(\"width\", segmentDim)\n      .attr(\"height\", segmentDim)\n      .attr(\"x\", bombCord[0]+segmentDim*i)\n      .attr(\"y\", bombCord[1])\n      .attr(\"ry\", segmentRadius)\n      .attr(\"rx\", segmentRadius)\n      .attr(\"fill\", colorScale(i))\n      .style(\"opacity\", 1)\n      .attr(\"stroke\", \"red\")\n      .transition()\n      .duration(1500)\n      .style(\"opacity\", 0)\n      .remove();\n    // left\n    d3.select('#board').append('rect')\n      .attr(\"class\", \"boom\")\n      .attr(\"width\", segmentDim)\n      .attr(\"height\", segmentDim)\n      .attr(\"x\", bombCord[0]-segmentDim*i)\n      .attr(\"y\", bombCord[1])\n      .attr(\"ry\", segmentRadius)\n      .attr(\"rx\", segmentRadius)\n      .attr(\"fill\", colorScale(i))\n      .style(\"opacity\", 1)\n      .attr(\"stroke\", \"red\")\n      .transition()\n      .duration(1500)\n      .style(\"opacity\", 0)\n      .remove();\n\n    d3.select('#board').append('rect')\n      .attr(\"class\", \"boom\")\n      .attr(\"width\", segmentDim)\n      .attr(\"height\", segmentDim)\n      .attr(\"x\", bombCord[0])\n      .attr(\"y\", bombCord[1]+segmentDim*i)\n      .attr(\"ry\", segmentRadius)\n      .attr(\"rx\", segmentRadius)\n      .attr(\"fill\", colorScale(i))\n      .style(\"opacity\", 1)\n      .attr(\"stroke\", \"red\")\n      .transition()\n      .duration(1500)\n      .style(\"opacity\", 0)\n      .remove();\n\n    d3.select('#board').append('rect')\n      .attr(\"class\", \"boom\")\n      .attr(\"width\", segmentDim)\n      .attr(\"height\", segmentDim)\n      .attr(\"x\", bombCord[0])\n      .attr(\"y\", bombCord[1]-segmentDim*i)\n      .attr(\"ry\", segmentRadius)\n      .attr(\"rx\", segmentRadius)\n      .attr(\"fill\", colorScale(i))\n      .style(\"opacity\", 1)\n      .attr(\"stroke\", \"red\")\n      .transition()\n      .duration(1500)\n      .style(\"opacity\", 0)\n      .remove();\n  }\n\n  d3.select('#bomb-text').remove();\n  d3.select('#bomb')\n    .transition()\n    .duration(1500)\n    .style(\"opacity\", 0)\n    .remove();\n\n  bombCount = 0;\n  liveBomb = false;\n\n  // ToDo:\n  // cut snake body if body within radius\n  isHeadInExplosion()\n\n}\n\nfunction isHeadInExplosion() {\n  let explosionXRange = [bombCord[0]-segmentDim*bombRadius, bombCord[0]+segmentDim*bombRadius];\n  let explosionYRange = [bombCord[1]-segmentDim*bombRadius, bombCord[1]+segmentDim*bombRadius];\n  let detectX = headCord[0] >= explosionXRange[0] && headCord[0] <= explosionXRange[1];\n  let detectY = headCord[1] >= explosionYRange[0] && headCord[1] <= explosionYRange[1];\n  if (detectX && detectY) {\n    console.log(\"Ouch, killed by a bomb...\")\n    gameLost();\n  }\n}\n\nfunction gameTick() {\n  count++;\n  if(snakeDirection === 'ArrowLeft') {\n    headCord[0] = headCord[0] - segmentDim;\n  }else if(snakeDirection === 'ArrowUp') {\n    headCord[1] = headCord[1] - segmentDim;\n  }else if(snakeDirection === 'ArrowRight') {\n    headCord[0] = headCord[0] + segmentDim;\n  }else if(snakeDirection === 'ArrowDown') {\n    headCord[1] = headCord[1] + segmentDim;\n  }\n  //headCord = [0,0]\n  snakeTail = [snakeBody[snakeBody.length-1][0], snakeBody[snakeBody.length-1][1]];\n  moveSnake(0, headCord);\n\n  if (foodCord.length > 0) {\n    if(foodCord[0] === headCord[0] && foodCord[1] === headCord[1]) {\n      console.warn('FOOD EATEN!!!')\n      score++;\n      if (speed > 100) {\n        speed = speed-25;\n      }\n\n      d3.select(\"#score-count\")\n        .text(score)\n\n      d3.select('#food').remove();\n      foodOnBoard = false;\n\n      snakeBody.push(snakeTail)\n\n      d3.select('#board').append('rect')\n        .attr(\"class\", \"snake\")\n        .attr(\"id\", \"segment\" + (snakeBody.length-1))\n        .attr(\"width\", segmentDim)\n        .attr(\"height\", segmentDim)\n        .attr(\"x\", snakeTail[0])\n        .attr(\"y\", snakeTail[1])\n        .attr(\"ry\", segmentRadius)\n        .attr(\"rx\", segmentRadius)\n        .attr(\"fill\", \"purple\");\n    }\n  }\n\n  if(count%5 === 0 && !foodOnBoard) {\n    spawnFood();\n  }\n\n  // bomb tick\n  if (liveBomb) {\n    console.log('This bomb is ticking...', bombCount)\n    // count down in seconds\n    let slowCount = Math.round(1000/speed);\n    if (+bombCount > 0 && count%slowCount === 1) {\n      bombCount = bombCount - 1;\n      d3.select('#bomb-text')\n        .text(bombCount)\n    } else if (bombCount <= 0){\n      // boom\n      console.warn(\"Boom!\")\n      bombGoesBoom();\n    }\n  }\n\n  // spawn bomb\n  if(score > 0 && count%10 === 0 && !liveBomb) {\n    spawnBomb();\n  }\n\n  // losing conditions\n  if(headCord[0] > boardWidth || headCord[0] < 0 || headCord[1] < 0 || headCord[1] > boardHeight) {\n    console.warn('Snakes out of the box!')\n    gameLost();\n    return\n  }\n  for (let segment of snakeBody) {\n    if (snakeBody.indexOf(segment) === 0) {\n      continue\n    }\n    if(headCord[0] === segment[0] && headCord[1] === segment[1]) {\n      console.warn('You bit your own tail...')\n      gameLost()\n      return\n    }\n  }\n\n  gameTicker = setTimeout(function() {\n    gameTick()\n  }, speed);\n}\n"]},"metadata":{},"sourceType":"module"}