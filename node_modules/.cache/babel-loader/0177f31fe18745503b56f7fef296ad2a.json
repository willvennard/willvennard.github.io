{"ast":null,"code":"import * as d3 from \"d3\"; // going to make this a class\n\nclass SnakeGame {\n  constructor() {\n    this.playing = false;\n    this.count = 0;\n    this.foodCord = [];\n    this.headCord = [];\n    this.snakeBody = [];\n    this.foodOnBoard = false;\n    this.score = 0;\n    this.speed = 200;\n    this.snakeTail = [];\n    this.snakeDirection = 'ArrowRight';\n    this.lastSnakeDirection = '';\n    const segmentDim = 10;\n    const boardWidth = 300;\n    const boardHeight = 300;\n    const segmentRadius = 5;\n  }\n\n}\n\nclass SnakeBombs {\n  constructor() {\n    this.cord = [];\n    this.liveBomb = false;\n    this.count = 0;\n    this.explosionRadius = 2;\n  }\n\n} // snake\n\n\nlet gameTicker;\nlet playing = false;\nlet count = 0;\nconst segmentDim = 10;\nconst boardWidth = 300;\nconst boardHeight = 300;\nconst segmentRadius = 5;\nlet foodCord = [];\nlet headCord = [];\nlet snakeBody = [];\nlet foodOnBoard = false;\nlet score = 0;\nlet speed = 200;\nlet snakeTail = [];\nlet snakeDirection = 'ArrowRight';\nlet lastSnakeDirection = ''; // bomb stuff\n\nlet bombCord = [];\nlet liveBomb = false;\nlet bombCount = 0;\nlet bombRadius = 2;\nexport function startSnakeGame() {\n  console.log('startSnakeGame: Start game!!');\n  initGame();\n  playing = true;\n}\ndocument.addEventListener('keydown', event => {\n  if (event.key === 'ArrowLeft' || event.key === 'ArrowUp' || event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n    event.preventDefault();\n\n    if (snakeDirection === 'ArrowLeft' && event.key === 'ArrowRight') {\n      return;\n    }\n\n    if (snakeDirection === 'ArrowRight' && event.key === 'ArrowLeft') {\n      return;\n    }\n\n    if (snakeDirection === 'ArrowUp' && event.key === 'ArrowDown') {\n      return;\n    }\n\n    if (snakeDirection === 'ArrowDown' && event.key === 'ArrowUp') {\n      return;\n    }\n\n    snakeDirection = event.key;\n  }\n});\n\nfunction initGame() {\n  d3.select('#score').style(\"display\", \"block\");\n  d3.select('#start-game').style(\"display\", \"none\");\n  d3.select('#board').remove();\n  d3.select('#end-text').remove();\n  headCord = [0, 0];\n  snakeBody = [];\n  score = 0;\n  speed = 200;\n  bombCount = 0;\n  snakeDirection = 'ArrowRight';\n  snakeBody.push(headCord);\n  d3.select('#game-space').append('svg').attr('id', 'board').attr('width', boardWidth).attr('height', boardHeight).append('rect').attr('class', 'snake head').attr(\"id\", \"segment\" + (snakeBody.length - 1)).attr('width', segmentDim).attr('height', segmentDim).attr('x', headCord[0]).attr('y', headCord[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr('fill', 'red'); // do this with d3\n\n  d3.select('#score-count').text(score);\n  spawnFood();\n  gameTick();\n}\n\nfunction randomBoardCord() {\n  let x = Math.round(Math.random() * boardWidth / segmentDim) * segmentDim - segmentDim;\n  let y = Math.round(Math.random() * boardHeight / segmentDim) * segmentDim - segmentDim; // keep food on map\n\n  if (x > boardWidth) {\n    x = boardWidth - segmentDim;\n  }\n\n  if (x < 0) {\n    x = 0;\n  }\n\n  if (y > boardHeight) {\n    y = boardHeight - segmentDim;\n  }\n\n  if (y < 0) {\n    y = 0;\n  }\n\n  return [x, y];\n}\n\nfunction spawnFood() {\n  foodCord = randomBoardCord();\n  d3.select('#board').append('rect').attr(\"id\", \"food\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", foodCord[0]).attr(\"y\", foodCord[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", \"limegreen\").style(\"opacity\", 0).transition().duration(1000).style(\"opacity\", 1);\n  foodOnBoard = true;\n}\n\nfunction spawnBomb() {\n  bombCord = randomBoardCord();\n  bombCount = 5;\n  d3.select('#board').append('rect').attr(\"id\", \"bomb\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", bombCord[0]).attr(\"y\", bombCord[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", \"orange\").style(\"opacity\", 0).attr(\"stroke\", \"red\").transition().duration(1000).style(\"opacity\", 1);\n  d3.select('#board').append('text').attr('id', 'bomb-text').text(bombCount).style('fill', 'black').style('font-size', '65%').attr(\"transform\", \"translate(\" + (bombCord[0] + segmentDim / 4) + \",\" + (bombCord[1] + segmentDim - 1) + \")\");\n  liveBomb = true;\n}\n\nfunction moveSnake(index, cord) {\n  d3.select('#segment' + index).attr(\"x\", cord[0]).attr(\"y\", cord[1]);\n\n  if (+index !== snakeBody.length - 1) {\n    let nextIdx = index + 1;\n    let oldCord = snakeBody[index];\n    moveSnake(nextIdx, oldCord);\n  }\n\n  snakeBody[index] = [cord[0], cord[1]];\n}\n\nfunction gameLost() {\n  clearTimeout(gameTicker);\n  console.warn('Game over.'); // remove old stuff and show game over\n\n  d3.select('#food').transition().duration(1000).style(\"opacity\", 0).remove();\n  d3.selectAll(\".snake\").transition().duration(1000).style(\"opacity\", 0).remove();\n  d3.select('#bomb-text').remove();\n  d3.select('#bomb').transition().duration(1000).style(\"opacity\", 0).remove();\n  d3.select('#game-space').append('h3').text('GAME OVER').attr('id', 'end-text').style(\"opacity\", 0).transition().duration(1000).style(\"opacity\", 1);\n  d3.select('#start-game').style(\"display\", \"block\");\n}\n\nfunction bombGoesBoom() {\n  let explosion = [];\n  let colorScale = d3.scaleLinear().domain([1, bombRadius]).range(['red', 'yellow']);\n\n  for (let i = 1; i <= bombRadius; i++) {\n    let cord = [bombCord[0] + segmentDim, bombCord[1]];\n    explosion.push(cord); // right\n\n    d3.select('#board').append('rect').attr(\"class\", \"boom\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", bombCord[0] + segmentDim * i).attr(\"y\", bombCord[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", colorScale(i)).style(\"opacity\", 1).attr(\"stroke\", \"red\").transition().duration(1500).style(\"opacity\", 0).remove(); // left\n\n    d3.select('#board').append('rect').attr(\"class\", \"boom\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", bombCord[0] - segmentDim * i).attr(\"y\", bombCord[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", colorScale(i)).style(\"opacity\", 1).attr(\"stroke\", \"red\").transition().duration(1500).style(\"opacity\", 0).remove();\n    d3.select('#board').append('rect').attr(\"class\", \"boom\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", bombCord[0]).attr(\"y\", bombCord[1] + segmentDim * i).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", colorScale(i)).style(\"opacity\", 1).attr(\"stroke\", \"red\").transition().duration(1500).style(\"opacity\", 0).remove();\n    d3.select('#board').append('rect').attr(\"class\", \"boom\").attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", bombCord[0]).attr(\"y\", bombCord[1] - segmentDim * i).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", colorScale(i)).style(\"opacity\", 1).attr(\"stroke\", \"red\").transition().duration(1500).style(\"opacity\", 0).remove();\n  }\n\n  d3.select('#bomb-text').remove();\n  d3.select('#bomb').transition().duration(1500).style(\"opacity\", 0).remove();\n  bombCount = 0;\n  liveBomb = false; // ToDo:\n  // cut snake body if body within radius\n\n  isHeadInExplosion();\n}\n\nfunction isHeadInExplosion() {\n  let explosionXRange = [bombCord[0] - segmentDim * bombRadius, bombCord[0] + segmentDim * bombRadius];\n  let explosionYRange = [bombCord[1] - segmentDim * bombRadius, bombCord[1] + segmentDim * bombRadius];\n  let detectX = headCord[0] >= explosionXRange[0] && headCord[0] <= explosionXRange[1];\n  let detectY = headCord[1] >= explosionYRange[0] && headCord[1] <= explosionYRange[1];\n\n  if (detectX && detectY) {\n    console.log(\"Ouch, killed by a bomb...\");\n    gameLost();\n  }\n}\n\nfunction gameTick() {\n  count++;\n\n  if (snakeDirection === 'ArrowLeft') {\n    headCord[0] = headCord[0] - segmentDim;\n  } else if (snakeDirection === 'ArrowUp') {\n    headCord[1] = headCord[1] - segmentDim;\n  } else if (snakeDirection === 'ArrowRight') {\n    headCord[0] = headCord[0] + segmentDim;\n  } else if (snakeDirection === 'ArrowDown') {\n    headCord[1] = headCord[1] + segmentDim;\n  } //headCord = [0,0]\n\n\n  snakeTail = [snakeBody[snakeBody.length - 1][0], snakeBody[snakeBody.length - 1][1]];\n  moveSnake(0, headCord);\n\n  if (foodCord.length > 0) {\n    if (foodCord[0] === headCord[0] && foodCord[1] === headCord[1]) {\n      console.warn('FOOD EATEN!!!');\n      score++;\n\n      if (speed > 100) {\n        speed = speed - 25;\n      }\n\n      d3.select(\"#score-count\").text(score);\n      d3.select('#food').remove();\n      foodOnBoard = false;\n      snakeBody.push(snakeTail);\n      d3.select('#board').append('rect').attr(\"class\", \"snake\").attr(\"id\", \"segment\" + (snakeBody.length - 1)).attr(\"width\", segmentDim).attr(\"height\", segmentDim).attr(\"x\", snakeTail[0]).attr(\"y\", snakeTail[1]).attr(\"ry\", segmentRadius).attr(\"rx\", segmentRadius).attr(\"fill\", \"purple\");\n    }\n  }\n\n  if (count % 5 === 0 && !foodOnBoard) {\n    spawnFood();\n  } // bomb tick\n\n\n  if (liveBomb) {\n    console.log('This bomb is ticking...', bombCount); // count down in seconds\n\n    let slowCount = Math.round(1000 / speed);\n\n    if (+bombCount > 0 && count % slowCount === 1) {\n      bombCount = bombCount - 1;\n      d3.select('#bomb-text').text(bombCount);\n    } else if (bombCount <= 0) {\n      // boom\n      console.log(\"Boom!\");\n      bombGoesBoom();\n    }\n  } // spawn bomb\n\n\n  if (score > 0 && count % 10 === 0 && !liveBomb) {\n    spawnBomb();\n  } // losing conditions\n\n\n  console.warn('DEBUG headCord[1] = ', headCord[1]);\n  console.warn('DEBUG boardHeight = ', boardHeight);\n\n  if (headCord[0] > boardWidth || headCord[0] < 0 // off the side \n  || headCord[1] < 0 || headCord[1] > boardHeight) {\n    // off the top or bottom\n    console.log('Snakes out of the box!');\n    gameLost();\n    return;\n  }\n\n  for (let segment of snakeBody) {\n    if (snakeBody.indexOf(segment) === 0) {\n      continue;\n    }\n\n    if (headCord[0] === segment[0] && headCord[1] === segment[1]) {\n      console.log('You bit your own tail...');\n      gameLost();\n      return;\n    }\n  }\n\n  gameTicker = setTimeout(function () {\n    gameTick();\n  }, speed);\n}","map":{"version":3,"sources":["/Users/williamvennard/my-app/src/SnakeApp.js"],"names":["d3","SnakeGame","constructor","playing","count","foodCord","headCord","snakeBody","foodOnBoard","score","speed","snakeTail","snakeDirection","lastSnakeDirection","segmentDim","boardWidth","boardHeight","segmentRadius","SnakeBombs","cord","liveBomb","explosionRadius","gameTicker","bombCord","bombCount","bombRadius","startSnakeGame","console","log","initGame","document","addEventListener","event","key","preventDefault","select","style","remove","push","append","attr","length","text","spawnFood","gameTick","randomBoardCord","x","Math","round","random","y","transition","duration","spawnBomb","moveSnake","index","nextIdx","oldCord","gameLost","clearTimeout","warn","selectAll","bombGoesBoom","explosion","colorScale","scaleLinear","domain","range","i","isHeadInExplosion","explosionXRange","explosionYRange","detectX","detectY","slowCount","segment","indexOf","setTimeout"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\n\n// going to make this a class\n\nclass SnakeGame {\n  constructor() {\n    this.playing = false;\n    this.count = 0;\n    this.foodCord = [];\n    this.headCord = [];\n    this.snakeBody = [];\n    this.foodOnBoard = false;\n    this.score = 0;\n    this.speed = 200;\n    this.snakeTail = [];\n    this.snakeDirection = 'ArrowRight';\n    this.lastSnakeDirection = '';\n\n    const segmentDim = 10;\n    const boardWidth = 300;\n    const boardHeight = 300;\n    const segmentRadius = 5;\n  }\n}\n\nclass SnakeBombs {\n  constructor() {\n    this.cord = [];\n    this.liveBomb = false;\n    this.count = 0;\n    this.explosionRadius = 2;\n  }\n}\n// snake\nlet gameTicker;\nlet playing = false;\nlet count = 0;\nconst segmentDim = 10;\nconst boardWidth = 300;\nconst boardHeight = 300;\nconst segmentRadius = 5;\nlet foodCord = [];\n\nlet headCord = [];\nlet snakeBody = [];\nlet foodOnBoard = false;\nlet score = 0;\nlet speed = 200;\nlet snakeTail = [];\nlet snakeDirection = 'ArrowRight';\nlet lastSnakeDirection = '';\n// bomb stuff\nlet bombCord = [];\nlet liveBomb = false;\nlet bombCount = 0;\nlet bombRadius = 2;\n\nexport function startSnakeGame() {\n    console.log('startSnakeGame: Start game!!')\n    initGame()\n    playing = true;\n}\n\ndocument.addEventListener('keydown', (event) => {\n  if(event.key === 'ArrowLeft' || event.key === 'ArrowUp' || event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n    event.preventDefault();\n    if (snakeDirection === 'ArrowLeft' && event.key === 'ArrowRight') { return }\n    if (snakeDirection === 'ArrowRight' && event.key === 'ArrowLeft') { return }\n    if (snakeDirection === 'ArrowUp' && event.key === 'ArrowDown') { return }\n    if (snakeDirection === 'ArrowDown' && event.key === 'ArrowUp') { return }\n    snakeDirection = event.key;\n  }\n});\n\nfunction initGame() {\n  d3.select('#score')\n      .style(\"display\", \"block\")\n  d3.select('#start-game')\n      .style(\"display\", \"none\")\n  d3.select('#board').remove();\n  d3.select('#end-text').remove();\n  headCord = [0,0];\n  snakeBody = [];\n  score = 0;\n  speed = 200;\n  bombCount = 0\n  snakeDirection = 'ArrowRight';\n  snakeBody.push(headCord);\n\n  d3.select('#game-space')\n    .append('svg')\n    .attr('id', 'board')\n    .attr('width', boardWidth)\n    .attr('height', boardHeight)\n    .append('rect')\n    .attr('class', 'snake head')\n    .attr(\"id\", \"segment\" + (snakeBody.length-1))\n    .attr('width', segmentDim)\n    .attr('height', segmentDim)\n    .attr('x', headCord[0])\n    .attr('y', headCord[1])\n    .attr(\"ry\", segmentRadius)\n    .attr(\"rx\", segmentRadius)\n    .attr('fill', 'red')\n\n  // do this with d3\n  d3.select('#score-count')\n    .text(score)\n\n  spawnFood();\n  gameTick();\n}\n\nfunction randomBoardCord() {\n  let x = (Math.round(Math.random()*boardWidth/segmentDim)*segmentDim) - segmentDim;\n  let y = (Math.round(Math.random()*boardHeight/segmentDim)*segmentDim) - segmentDim;\n  // keep food on map\n  if (x > boardWidth) { x = boardWidth - segmentDim}\n  if (x < 0) { x = 0 }\n  if (y > boardHeight) {y = boardHeight - segmentDim}\n  if (y < 0) { y = 0 }\n\n  return [x,y];\n}\n\nfunction spawnFood() {\n  foodCord = randomBoardCord()\n\n  d3.select('#board').append('rect')\n    .attr(\"id\", \"food\")\n    .attr(\"width\", segmentDim)\n    .attr(\"height\", segmentDim)\n    .attr(\"x\", foodCord[0])\n    .attr(\"y\", foodCord[1])\n    .attr(\"ry\", segmentRadius)\n    .attr(\"rx\", segmentRadius)\n    .attr(\"fill\", \"limegreen\")\n    .style(\"opacity\", 0)\n    .transition()\n    .duration(1000)\n    .style(\"opacity\", 1)\n\n  foodOnBoard = true;\n}\n\nfunction spawnBomb() {\n  bombCord = randomBoardCord();\n  bombCount = 5;\n  d3.select('#board').append('rect')\n    .attr(\"id\", \"bomb\")\n    .attr(\"width\", segmentDim)\n    .attr(\"height\", segmentDim)\n    .attr(\"x\", bombCord[0])\n    .attr(\"y\", bombCord[1])\n    .attr(\"ry\", segmentRadius)\n    .attr(\"rx\", segmentRadius)\n    .attr(\"fill\", \"orange\")\n    .style(\"opacity\", 0)\n    .attr(\"stroke\", \"red\")\n    .transition()\n    .duration(1000)\n    .style(\"opacity\", 1)\n\n  d3.select('#board').append('text')\n    .attr('id', 'bomb-text')\n    .text(bombCount)\n    .style('fill', 'black')\n    .style('font-size', '65%')\n    .attr(\"transform\", \"translate(\"+(bombCord[0]+segmentDim/4)+\",\"+(bombCord[1]+segmentDim-1)+\")\");\n\n  liveBomb = true;\n}\n\nfunction moveSnake(index, cord) {\n  d3.select('#segment' + index)\n    .attr(\"x\", cord[0])\n    .attr(\"y\", cord[1]);\n\n  if (+index !== snakeBody.length-1) {\n    let nextIdx = index + 1;\n    let oldCord = snakeBody[index];\n    moveSnake(nextIdx, oldCord)\n  }\n  snakeBody[index] = [cord[0], cord[1]];\n}\n\nfunction gameLost() {\n  clearTimeout(gameTicker);\n  console.warn('Game over.')\n\n  // remove old stuff and show game over\n  d3.select('#food').transition()\n    .duration(1000)\n    .style(\"opacity\", 0)\n    .remove();\n\n  d3.selectAll(\".snake\").transition()\n    .duration(1000)\n    .style(\"opacity\", 0)\n    .remove();\n\n  d3.select('#bomb-text').remove();\n\n  d3.select('#bomb')\n    .transition()\n    .duration(1000)\n    .style(\"opacity\", 0)\n    .remove();\n\n  d3.select('#game-space')\n    .append('h3')\n    .text('GAME OVER')\n    .attr('id', 'end-text')\n    .style(\"opacity\", 0)\n    .transition()\n    .duration(1000)\n    .style(\"opacity\", 1)\n\n    d3.select('#start-game')\n      .style(\"display\", \"block\")\n    \n}\n\nfunction bombGoesBoom() {\n  let explosion = [];\n  let colorScale = d3.scaleLinear()\n    .domain([1, bombRadius])\n    .range(['red', 'yellow']);\n\n  for(let i = 1; i <= bombRadius; i++) {\n    let cord = [bombCord[0]+segmentDim, bombCord[1]]\n    explosion.push(cord)\n    // right\n    d3.select('#board').append('rect')\n      .attr(\"class\", \"boom\")\n      .attr(\"width\", segmentDim)\n      .attr(\"height\", segmentDim)\n      .attr(\"x\", bombCord[0]+segmentDim*i)\n      .attr(\"y\", bombCord[1])\n      .attr(\"ry\", segmentRadius)\n      .attr(\"rx\", segmentRadius)\n      .attr(\"fill\", colorScale(i))\n      .style(\"opacity\", 1)\n      .attr(\"stroke\", \"red\")\n      .transition()\n      .duration(1500)\n      .style(\"opacity\", 0)\n      .remove();\n    // left\n    d3.select('#board').append('rect')\n      .attr(\"class\", \"boom\")\n      .attr(\"width\", segmentDim)\n      .attr(\"height\", segmentDim)\n      .attr(\"x\", bombCord[0]-segmentDim*i)\n      .attr(\"y\", bombCord[1])\n      .attr(\"ry\", segmentRadius)\n      .attr(\"rx\", segmentRadius)\n      .attr(\"fill\", colorScale(i))\n      .style(\"opacity\", 1)\n      .attr(\"stroke\", \"red\")\n      .transition()\n      .duration(1500)\n      .style(\"opacity\", 0)\n      .remove();\n\n    d3.select('#board').append('rect')\n      .attr(\"class\", \"boom\")\n      .attr(\"width\", segmentDim)\n      .attr(\"height\", segmentDim)\n      .attr(\"x\", bombCord[0])\n      .attr(\"y\", bombCord[1]+segmentDim*i)\n      .attr(\"ry\", segmentRadius)\n      .attr(\"rx\", segmentRadius)\n      .attr(\"fill\", colorScale(i))\n      .style(\"opacity\", 1)\n      .attr(\"stroke\", \"red\")\n      .transition()\n      .duration(1500)\n      .style(\"opacity\", 0)\n      .remove();\n\n    d3.select('#board').append('rect')\n      .attr(\"class\", \"boom\")\n      .attr(\"width\", segmentDim)\n      .attr(\"height\", segmentDim)\n      .attr(\"x\", bombCord[0])\n      .attr(\"y\", bombCord[1]-segmentDim*i)\n      .attr(\"ry\", segmentRadius)\n      .attr(\"rx\", segmentRadius)\n      .attr(\"fill\", colorScale(i))\n      .style(\"opacity\", 1)\n      .attr(\"stroke\", \"red\")\n      .transition()\n      .duration(1500)\n      .style(\"opacity\", 0)\n      .remove();\n  }\n\n  d3.select('#bomb-text').remove();\n  d3.select('#bomb')\n    .transition()\n    .duration(1500)\n    .style(\"opacity\", 0)\n    .remove();\n\n  bombCount = 0;\n  liveBomb = false;\n\n  // ToDo:\n  // cut snake body if body within radius\n  isHeadInExplosion()\n\n}\n\nfunction isHeadInExplosion() {\n  let explosionXRange = [bombCord[0]-segmentDim*bombRadius, bombCord[0]+segmentDim*bombRadius];\n  let explosionYRange = [bombCord[1]-segmentDim*bombRadius, bombCord[1]+segmentDim*bombRadius];\n  let detectX = headCord[0] >= explosionXRange[0] && headCord[0] <= explosionXRange[1];\n  let detectY = headCord[1] >= explosionYRange[0] && headCord[1] <= explosionYRange[1];\n  if (detectX && detectY) {\n    console.log(\"Ouch, killed by a bomb...\")\n    gameLost();\n  }\n}\n\nfunction gameTick() {\n  count++;\n  if(snakeDirection === 'ArrowLeft') {\n    headCord[0] = headCord[0] - segmentDim;\n  }else if(snakeDirection === 'ArrowUp') {\n    headCord[1] = headCord[1] - segmentDim;\n  }else if(snakeDirection === 'ArrowRight') {\n    headCord[0] = headCord[0] + segmentDim;\n  }else if(snakeDirection === 'ArrowDown') {\n    headCord[1] = headCord[1] + segmentDim;\n  }\n  //headCord = [0,0]\n  snakeTail = [snakeBody[snakeBody.length-1][0], snakeBody[snakeBody.length-1][1]];\n  moveSnake(0, headCord);\n\n  if (foodCord.length > 0) {\n    if(foodCord[0] === headCord[0] && foodCord[1] === headCord[1]) {\n      console.warn('FOOD EATEN!!!')\n      score++;\n      if (speed > 100) {\n        speed = speed-25;\n      }\n\n      d3.select(\"#score-count\")\n        .text(score)\n\n      d3.select('#food').remove();\n      foodOnBoard = false;\n\n      snakeBody.push(snakeTail)\n\n      d3.select('#board').append('rect')\n        .attr(\"class\", \"snake\")\n        .attr(\"id\", \"segment\" + (snakeBody.length-1))\n        .attr(\"width\", segmentDim)\n        .attr(\"height\", segmentDim)\n        .attr(\"x\", snakeTail[0])\n        .attr(\"y\", snakeTail[1])\n        .attr(\"ry\", segmentRadius)\n        .attr(\"rx\", segmentRadius)\n        .attr(\"fill\", \"purple\");\n    }\n  }\n\n  if(count%5 === 0 && !foodOnBoard) {\n    spawnFood();\n  }\n\n  // bomb tick\n  if (liveBomb) {\n    console.log('This bomb is ticking...', bombCount)\n    // count down in seconds\n    let slowCount = Math.round(1000/speed);\n    if (+bombCount > 0 && count%slowCount === 1) {\n      bombCount = bombCount - 1;\n      d3.select('#bomb-text')\n        .text(bombCount)\n    } else if (bombCount <= 0){\n      // boom\n      console.log(\"Boom!\")\n      bombGoesBoom();\n    }\n  }\n\n  // spawn bomb\n  if(score > 0 && count%10 === 0 && !liveBomb) {\n    spawnBomb();\n  }\n\n  // losing conditions\n  console.warn('DEBUG headCord[1] = ', headCord[1])\n  console.warn('DEBUG boardHeight = ', boardHeight)\n  if(headCord[0] > boardWidth || headCord[0] < 0 // off the side \n    || headCord[1] < 0 || headCord[1] > boardHeight) { // off the top or bottom\n    console.log('Snakes out of the box!')\n    gameLost();\n    return\n  }\n  for (let segment of snakeBody) {\n    if (snakeBody.indexOf(segment) === 0) {\n      continue\n    }\n    if(headCord[0] === segment[0] && headCord[1] === segment[1]) {\n      console.log('You bit your own tail...')\n      gameLost()\n      return\n    }\n  }\n\n  gameTicker = setTimeout(function() {\n    gameTick()\n  }, speed);\n}\n"]},"metadata":{},"sourceType":"module"}