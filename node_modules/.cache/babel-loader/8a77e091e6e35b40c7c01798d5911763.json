{"ast":null,"code":"var _jsxFileName = \"/Users/williamvennard/my-app/src/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      console.warn(\"getCity: addressArray\", addressArray);\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {\n      console.warn(\"Infow window has been closed!!!\");\n    };\n\n    this.onPlaceSelected = place => {\n      console.warn(\"place =\", place);\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      // Try HTML5 geolocation.\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          var pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          infoWindow.setPosition(pos);\n          infoWindow.setContent('Location found.');\n          infoWindow.open(map);\n          map.setCenter(pos);\n        }, function () {\n          handleLocationError(true, infoWindow, map.getCenter());\n        });\n      } else {\n        // Browser doesn't support Geolocation\n        console.warn(\"Browser doesn't support Geolocation\"); //handleLocationError(false, infoWindow, map.getCenter());\n      }\n\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n    * Get the city and set the city input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0,\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height,\n            width: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          'marginTop': `50px`,\n          'marginBottom': `50px`\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }))));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/williamvennard/my-app/src/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","Component","constructor","props","getCity","addressArray","console","warn","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","address_components","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","log","newLat","latLng","newLng","fromLatLng","then","response","results","error","center","componentDidMount","navigator","geolocation","getCurrentPosition","position","pos","coords","latitude","longitude","infoWindow","setPosition","setContent","open","map","setCenter","handleLocationError","getCenter","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","padding","margin","color","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I\");\nGeocode.enableDebug();\n\n\n\n\n\nclass Map extends React.Component{\n  constructor(props){\n    super( props );\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    }\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n  componentDidMount() {\n    Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n      response => {\n\n        // Try HTML5 geolocation.\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(function(position) {\n            var pos = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            };\n\n            infoWindow.setPosition(pos);\n            infoWindow.setContent('Location found.');\n            infoWindow.open(map);\n            map.setCenter(pos);\n          }, function() {\n            handleLocationError(true, infoWindow, map.getCenter());\n          });\n        } else {\n          // Browser doesn't support Geolocation\n          console.warn(\"Browser doesn't support Geolocation\")\n          //handleLocationError(false, infoWindow, map.getCenter());\n        }\n\n\n        const address = response.results[0].formatted_address,\n        addressArray =  response.results[0].address_components,\n        city = this.getCity( addressArray ),\n        area = this.getArea( addressArray ),\n        state = this.getState( addressArray );\n        console.log( 'city', city, area, state );\n    \n        this.setState( {\n          address: ( address ) ? address : '',\n          area: ( area ) ? area : '',\n          city: ( city ) ? city : '',\n          state: ( state ) ? state : '',\n        } )\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  };\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate( nextProps, nextState ){\n    if (\n      this.state.markerPosition.lat !== this.props.center.lat ||\n      this.state.address !== nextState.address ||\n      this.state.city !== nextState.city ||\n      this.state.area !== nextState.area ||\n      this.state.state !== nextState.state\n    ) {\n      return true\n    } else if ( this.props.center.lat === nextProps.center.lat ){\n      return false\n    }\n  }\n  /**\n    * Get the city and set the city input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getCity = ( addressArray ) => {\n    console.warn(\"getCity: addressArray\", addressArray)\n    let city = '';\n    for( let i = 0; i < addressArray.length; i++ ) {\n      if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\n        city = addressArray[ i ].long_name;\n        return city;\n      }\n    }\n  };\n  /**\n    * Get the area and set the area input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getArea = ( addressArray ) => {\n    let area = '';\n    for( let i = 0; i < addressArray.length; i++ ) {\n      if ( addressArray[ i ].types[0]  ) {\n        for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n          if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n            area = addressArray[ i ].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n  /**\n    * Get the address and set the address input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getState = ( addressArray ) => {\n    let state = '';\n    for( let i = 0; i < addressArray.length; i++ ) {\n      for( let i = 0; i < addressArray.length; i++ ) {\n        if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\n          state = addressArray[ i ].long_name;\n          return state;\n        }\n      }\n    }\n  };\n  /**\n    * And function for city,state and address input\n    * @param event\n    */\n  onChange = ( event ) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  /**\n    * This Event triggers when the marker window is closed\n    *\n    * @param event\n    */\n  onInfoWindowClose = ( event ) => {\n    console.warn(\"Infow window has been closed!!!\")\n  };\n  /**\n    * When the user types an address in the search box\n    * @param place\n    */\n  onPlaceSelected = ( place ) => {\n    console.warn(\"place =\", place)\n    const address = place.formatted_address,\n    addressArray =  place.address_components,\n    city = this.getCity( addressArray ),\n    area = this.getArea( addressArray ),\n    state = this.getState( addressArray ),\n    latValue = place.geometry.location.lat(),\n    lngValue = place.geometry.location.lng();\n    // Set these values in the state.\n    this.setState({\n      address: ( address ) ? address : '',\n      area: ( area ) ? area : '',\n      city: ( city ) ? city : '',\n      state: ( state ) ? state : '',\n      markerPosition: {\n      lat: latValue,\n      lng: lngValue\n    },\n      mapPosition: {\n        lat: latValue,\n        lng: lngValue\n      },\n    })\n  };\n  /**\n    * When the marker is dragged you get the lat and long using the functions available from event object.\n    * Use geocode to get the address, city, area and state from the lat and lng positions.\n    * And then set those values in the state.\n    *\n    * @param event\n    */\n  onMarkerDragEnd = ( event ) => {\n    console.log( 'event', event );\n    let newLat = event.latLng.lat(),\n    newLng = event.latLng.lng(),\n    addressArray = [];\n    Geocode.fromLatLng( newLat , newLng ).then(\n      response => {\n        const address = response.results[0].formatted_address,\n        addressArray =  response.results[0].address_components,\n        city = this.getCity( addressArray ),\n        area = this.getArea( addressArray ),\n        state = this.getState( addressArray );\n        this.setState( {\n          address: ( address ) ? address : '',\n          area: ( area ) ? area : '',\n          city: ( city ) ? city : '',\n          state: ( state ) ? state : ''\n        } )\n      },\n     error => {\n      console.error(error);\n     }\n    );\n  };\n  render(){\n    const AsyncMap = withScriptjs(\n      withGoogleMap(\n        props => (\n          <GoogleMap google={this.props.google}\n            defaultZoom={this.props.zoom}\n            defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n          >\n            <Autocomplete\n             style={{\n              width: '100%',\n              height: '40px',\n              paddingLeft: '16px',\n              marginTop: '2px',\n              marginBottom: '100px'\n             }}\n             onPlaceSelected={ this.onPlaceSelected }\n             types={['(regions)']}\n            />\n\n            <Marker \n              google={this.props.google}\n              name={'Dolores park'}\n              draggable={true}\n              onDragEnd={ this.onMarkerDragEnd }\n              position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n            />\n            <Marker />\n            <InfoWindow\n              onClose={this.onInfoWindowClose}\n              position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\n            >\n              <div>\n                <span style={{ padding: 0, margin: 0, color: 'black'}}>{ this.state.address }</span>\n              </div>\n            </InfoWindow>\n          </GoogleMap>\n        )\n      )\n    );\n    let map;\n    if( this.props.center.lat !== undefined ) {\n      map = <div className=\"col\">\n        <AsyncMap\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I&libraries=places\"\n          loadingElement={\n            <div style={{ height: `100%` }} />\n          }\n          containerElement={\n            <div style={{ height: this.props.height, width: `100%` }} />\n          }\n          mapElement={\n            <div style={{ height: `100%` }} />\n          }\n        />\n        <div style={{ 'marginTop': `50px`, 'marginBottom': `50px` }}>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">City</label>\n            <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">Area</label>\n            <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">State</label>\n            <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">Address</label>\n            <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n          </div>\n        </div>\n      </div>\n    } else {\n      map = <div style={{ height: this.props.height }} />\n    }\n    return( map )\n  }\n}\nexport default Map\n"]},"metadata":{},"sourceType":"module"}