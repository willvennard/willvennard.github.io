{"ast":null,"code":"import * as d3 from \"d3\";\n\nfunction initKeyBindings() {\n  document.addEventListener('keydown', event => {\n    if (event.key === 'ArrowLeft' || event.key === 'ArrowUp' || event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n      event.preventDefault();\n\n      if (snakeGame.snakeDirection === 'ArrowLeft' && event.key === 'ArrowRight') {\n        return;\n      }\n\n      if (snakeGame.snakeDirection === 'ArrowRight' && event.key === 'ArrowLeft') {\n        return;\n      }\n\n      if (snakeGame.snakeDirection === 'ArrowUp' && event.key === 'ArrowDown') {\n        return;\n      }\n\n      if (snakeGame.snakeDirection === 'ArrowDown' && event.key === 'ArrowUp') {\n        return;\n      }\n\n      snakeGame.snakeDirection = event.key;\n    }\n  });\n  let el = document.getElementsById(\"snake-container\")[0];\n  el.addEventListener(\"touchstart\", touchHandler);\n}\n\nfunction touchHandler(e) {\n  if (e.touches) {\n    playerX = e.touches[0].pageX - canvas.offsetLeft - playerWidth / 2;\n    playerY = e.touches[0].pageY - canvas.offsetTop - playerHeight / 2;\n    output.innerHTML = \"Touch: \" + \" x: \" + playerX + \", y: \" + playerY;\n    e.preventDefault();\n  }\n}\n\nclass SnakeGame {\n  constructor() {\n    this.playing = false;\n    this.count = 0;\n    this.foodCord = [];\n    this.headCord = [];\n    this.snakeBody = [];\n    this.foodOnBoard = false;\n    this.score = 0;\n    this.speed = 200;\n    this.snakeTail = [];\n    this.snakeDirection = 'ArrowRight';\n    this.lastSnakeDirection = '';\n    this.gameTicker = \"\";\n    this.segmentDim = 10;\n    this.boardWidth = 300;\n    this.boardHeight = 300;\n    this.segmentRadius = 5;\n  } // Might be a better way to do this.\n  // put into another class and simply reset?\n\n\n  initGame() {\n    d3.selectAll(\".game-intro\").remove();\n    d3.select('#score').style(\"display\", \"block\");\n    d3.select('#start-game').style(\"display\", \"none\");\n    d3.select('#board').remove();\n    d3.select('#end-text').remove();\n    this.headCord = [0, 0];\n    this.snakeBody = [];\n    this.score = 0;\n    this.speed = 200;\n    this.bombCount = 0;\n    this.snakeDirection = 'ArrowRight';\n    this.snakeBody.push(this.headCord);\n    this.playing = true;\n    initKeyBindings();\n    d3.select('#game-space').append('svg').attr('id', 'board').attr('width', this.boardWidth).attr('height', this.boardHeight).append('rect').attr('class', 'snake head').attr(\"id\", \"segment\" + (this.snakeBody.length - 1)).attr('width', this.segmentDim).attr('height', this.segmentDim).attr('x', this.headCord[0]).attr('y', this.headCord[1]).attr(\"ry\", this.segmentRadius).attr(\"rx\", this.segmentRadius).attr('fill', 'red'); // do this with d3\n\n    d3.select('#score-count').text(this.score);\n    d3.select('#pause-game').style(\"display\", \"block\");\n    this.spawnFood();\n    this.gameTick();\n  }\n\n  randomBoardCord() {\n    let segDim = this.segmentDim;\n    let x = Math.round(Math.random() * this.boardWidth / segDim) * segDim - segDim;\n    let y = Math.round(Math.random() * this.boardHeight / segDim) * segDim - segDim; // keep food on map\n\n    if (x > this.boardWidth) {\n      x = this.boardWidth - segDim;\n    }\n\n    if (x < 0) {\n      x = 0;\n    }\n\n    if (y > this.boardHeight) {\n      y = this.boardHeight - segDim;\n    }\n\n    if (y < 0) {\n      y = 0;\n    }\n\n    return [x, y];\n  }\n\n  spawnFood() {\n    this.foodCord = this.randomBoardCord();\n    d3.select('#board').append('rect').attr(\"id\", \"food\").attr(\"width\", this.segmentDim).attr(\"height\", this.segmentDim).attr(\"x\", this.foodCord[0]).attr(\"y\", this.foodCord[1]).attr(\"ry\", this.segmentRadius).attr(\"rx\", this.segmentRadius).attr(\"fill\", \"limegreen\").style(\"opacity\", 0).transition().duration(1000).style(\"opacity\", 1);\n    this.foodOnBoard = true;\n  }\n\n  moveSnake(index, cord) {\n    d3.select('#segment' + index).attr(\"x\", cord[0]).attr(\"y\", cord[1]);\n\n    if (+index !== this.snakeBody.length - 1) {\n      let nextIdx = index + 1;\n      let oldCord = this.snakeBody[index];\n      this.moveSnake(nextIdx, oldCord);\n    }\n\n    this.snakeBody[index] = [cord[0], cord[1]];\n  }\n\n  gameLost() {\n    clearTimeout(this.gameTicker);\n    console.log('Game over.');\n\n    if (!this.playing) {\n      return;\n    }\n\n    this.playing = false; // remove old stuff and show game over\n\n    d3.select('#food').transition().duration(1000).style(\"opacity\", 0).remove();\n    d3.selectAll(\".snake\").transition().duration(1000).style(\"opacity\", 0).remove();\n    d3.select('#bomb-text').remove();\n    d3.select('#bomb').transition().duration(1000).style(\"opacity\", 0).remove();\n    d3.select('#end-text').remove();\n    d3.select('#game-space').append('h3').text('GAME OVER').attr('id', 'end-text').style(\"opacity\", 0).transition().duration(1000).style(\"opacity\", 1);\n    d3.select('#pause-game').style(\"display\", \"none\");\n    d3.select('#start-game').style(\"display\", \"block\");\n  }\n\n  gameTick() {\n    if (this.paused) {\n      return;\n    }\n\n    this.count++;\n\n    if (this.snakeDirection === 'ArrowLeft') {\n      this.headCord[0] = this.headCord[0] - this.segmentDim;\n    } else if (this.snakeDirection === 'ArrowUp') {\n      this.headCord[1] = this.headCord[1] - this.segmentDim;\n    } else if (this.snakeDirection === 'ArrowRight') {\n      this.headCord[0] = this.headCord[0] + this.segmentDim;\n    } else if (this.snakeDirection === 'ArrowDown') {\n      this.headCord[1] = this.headCord[1] + this.segmentDim;\n    } //headCord = [0,0]\n\n\n    this.snakeTail = [this.snakeBody[this.snakeBody.length - 1][0], this.snakeBody[this.snakeBody.length - 1][1]];\n    this.moveSnake(0, this.headCord);\n\n    if (this.foodCord.length > 0) {\n      if (this.foodCord[0] === this.headCord[0] && this.foodCord[1] === this.headCord[1]) {\n        console.warn('FOOD EATEN!!!');\n        this.score++;\n\n        if (this.speed > 100) {\n          this.speed = this.speed - 10;\n        }\n\n        d3.select(\"#score-count\").text(this.score);\n        d3.select('#food').remove();\n        this.foodOnBoard = false;\n        this.snakeBody.push(this.snakeTail);\n        d3.select('#board').append('rect').attr(\"class\", \"snake\").attr(\"id\", \"segment\" + (this.snakeBody.length - 1)).attr(\"width\", this.segmentDim).attr(\"height\", this.segmentDim).attr(\"x\", this.snakeTail[0]).attr(\"y\", this.snakeTail[1]).attr(\"ry\", this.segmentRadius).attr(\"rx\", this.segmentRadius).attr(\"fill\", \"purple\");\n      }\n    }\n\n    if (this.count % 5 === 0 && !this.foodOnBoard) {\n      this.spawnFood();\n    } // put bomb stuff in seperate function\n\n\n    if (this.snakeBombs === undefined) {\n      this.snakeBombs = new SnakeBombs(this);\n    } // bomb tick\n\n\n    if (this.snakeBombs.liveBomb) {\n      //console.log('This bomb is ticking...', this.snakeBombs.bombCount)\n      // count down in seconds\n      let slowCount = Math.round(1000 / this.speed);\n\n      if (+this.snakeBombs.bombCount > 0 && this.count % slowCount === 1) {\n        this.snakeBombs.bombCount = this.snakeBombs.bombCount - 1;\n        d3.select('#bomb-text').text(this.snakeBombs.bombCount);\n      } else if (this.snakeBombs.bombCount <= 0) {\n        // boom\n        console.log(\"Boom!\");\n        this.snakeBombs.bombGoesBoom();\n      }\n    } // spawn bomb\n\n\n    if (this.score > 0 && this.count % 10 === 0 && !this.snakeBombs.liveBomb) {\n      this.snakeBombs.spawnBomb();\n    } // losing conditions\n\n\n    if (this.headCord[0] >= this.boardWidth || this.headCord[0] < 0 // off the sides \n    || this.headCord[1] < 0 || this.headCord[1] >= this.boardHeight) {\n      // off the top or bottom\n      console.log('Snakes out of the box!');\n      this.gameLost();\n      return;\n    }\n\n    for (let segment of this.snakeBody) {\n      if (this.snakeBody.indexOf(segment) === 0) {\n        continue;\n      }\n\n      if (this.headCord[0] === segment[0] && this.headCord[1] === segment[1]) {\n        console.log('You bit your own tail...');\n        this.gameLost();\n        return;\n      }\n    }\n\n    let that = this;\n    this.gameTicker = setTimeout(function () {\n      that.gameTick();\n    }, that.speed);\n  }\n\n}\n\nclass SnakeBombs {\n  constructor(snakeGame) {\n    this.snakeGame = snakeGame;\n    this.bombCord = [];\n    this.liveBomb = false;\n    this.bombCount = 0;\n    this.explosionRadius = 2;\n  }\n\n  spawnBomb() {\n    this.bombCord = this.snakeGame.randomBoardCord();\n    this.bombCount = 5;\n    d3.select('#board').append('rect').attr(\"id\", \"bomb\").attr(\"width\", this.snakeGame.segmentDim).attr(\"height\", this.snakeGame.segmentDim).attr(\"x\", this.bombCord[0]).attr(\"y\", this.bombCord[1]).attr(\"ry\", this.snakeGame.segmentRadius).attr(\"rx\", this.snakeGame.segmentRadius).attr(\"fill\", \"orange\").style(\"opacity\", 0).attr(\"stroke\", \"red\").transition().duration(1000).style(\"opacity\", 1);\n    d3.select('#board').append('text').attr('id', 'bomb-text').text(this.bombCount).style('fill', 'black').style('font-size', '65%').attr(\"transform\", \"translate(\" + (this.bombCord[0] + this.snakeGame.segmentDim / 4) + \",\" + (this.bombCord[1] + this.snakeGame.segmentDim - 1) + \")\");\n    this.liveBomb = true;\n  }\n\n  bombGoesBoom() {\n    let colorScale = d3.scaleLinear().domain([0, this.explosionRadius]).range(['red', 'yellow']);\n    let explosionArea = [];\n\n    for (let i = 1; i <= this.explosionRadius; i++) {\n      let start = this.bombCord;\n\n      for (let xDim = -i; xDim <= i; xDim++) {\n        for (let yDim = -i; yDim <= i; yDim++) {\n          let newX = start[0] + xDim * this.snakeGame.segmentDim;\n          let newY = start[1] + yDim * this.snakeGame.segmentDim;\n          let newCord = [newX, newY];\n\n          if (!explosionArea.includes(newCord)) {\n            explosionArea.push(newCord);\n          }\n        }\n      }\n    }\n\n    for (let block of explosionArea) {\n      // distance in block units\n      let distance = distanceBetweenPoints(this.bombCord, block) / this.snakeGame.segmentDim;\n      d3.select('#board').append('rect').attr(\"class\", \"boom\").attr(\"width\", this.snakeGame.segmentDim).attr(\"height\", this.snakeGame.segmentDim).attr(\"x\", block[0]).attr(\"y\", block[1]).attr(\"ry\", this.snakeGame.segmentRadius).attr(\"rx\", this.snakeGame.segmentRadius).attr(\"fill\", colorScale(distance)).style(\"opacity\", 1).attr(\"stroke\", \"red\").transition().duration(1500).style(\"opacity\", 0).attr(\"fill\", \"blue\").attr(\"width\", 1).attr(\"height\", 1).remove();\n    }\n\n    d3.select('#bomb-text').remove();\n    d3.select('#bomb').transition().duration(1500).style(\"opacity\", 0).remove();\n    this.bombCount = 0;\n    this.liveBomb = false;\n    this.isHeadInExplosion();\n  }\n\n  isHeadInExplosion() {\n    let bombR = this.explosionRadius;\n    let segDim = this.snakeGame.segmentDim;\n    let explosionXRange = [this.bombCord[0] - segDim * bombR, this.bombCord[0] + segDim * bombR];\n    let explosionYRange = [this.bombCord[1] - segDim * bombR, this.bombCord[1] + segDim * bombR];\n    let detectX = this.snakeGame.headCord[0] >= explosionXRange[0] && this.snakeGame.headCord[0] <= explosionXRange[1];\n    let detectY = this.snakeGame.headCord[1] >= explosionYRange[0] && this.snakeGame.headCord[1] <= explosionYRange[1];\n\n    if (detectX && detectY) {\n      console.log(\"Ouch, killed by a bomb...\");\n      this.snakeGame.gameLost();\n    }\n  }\n\n}\n\nfunction distanceBetweenPoints(pointA, pointB) {\n  let x0 = pointA[0];\n  let x1 = pointB[0];\n  let y0 = pointA[1];\n  let y1 = pointB[1];\n  let x = Math.pow(x1 - x0, 2);\n  let y = Math.pow(y1 - y0, 2);\n  let distance = Math.pow(x + y, 0.5);\n  return distance;\n}\n\nlet snakeGame = new SnakeGame();\nexport function startSnakeGame() {\n  console.log('startSnakeGame: Start game!!');\n  snakeGame.initGame();\n}\nexport function pauseSnakeGame() {\n  if (snakeGame.paused) {\n    snakeGame.paused = false;\n    snakeGame.gameTick();\n  } else {\n    snakeGame.paused = true;\n  }\n}","map":{"version":3,"sources":["/Users/williamvennard/my-app/src/SnakeApp.js"],"names":["d3","initKeyBindings","document","addEventListener","event","key","preventDefault","snakeGame","snakeDirection","el","getElementsById","touchHandler","e","touches","playerX","pageX","canvas","offsetLeft","playerWidth","playerY","pageY","offsetTop","playerHeight","output","innerHTML","SnakeGame","constructor","playing","count","foodCord","headCord","snakeBody","foodOnBoard","score","speed","snakeTail","lastSnakeDirection","gameTicker","segmentDim","boardWidth","boardHeight","segmentRadius","initGame","selectAll","remove","select","style","bombCount","push","append","attr","length","text","spawnFood","gameTick","randomBoardCord","segDim","x","Math","round","random","y","transition","duration","moveSnake","index","cord","nextIdx","oldCord","gameLost","clearTimeout","console","log","paused","warn","snakeBombs","undefined","SnakeBombs","liveBomb","slowCount","bombGoesBoom","spawnBomb","segment","indexOf","that","setTimeout","bombCord","explosionRadius","colorScale","scaleLinear","domain","range","explosionArea","i","start","xDim","yDim","newX","newY","newCord","includes","block","distance","distanceBetweenPoints","isHeadInExplosion","bombR","explosionXRange","explosionYRange","detectX","detectY","pointA","pointB","x0","x1","y0","y1","pow","startSnakeGame","pauseSnakeGame"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;;AAGA,SAASC,eAAT,GAA4B;AAC1BC,EAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAsCC,KAAD,IAAW;AAC9C,QAAGA,KAAK,CAACC,GAAN,KAAc,WAAd,IAA6BD,KAAK,CAACC,GAAN,KAAc,SAA3C,IAAwDD,KAAK,CAACC,GAAN,KAAc,YAAtE,IAAsFD,KAAK,CAACC,GAAN,KAAc,WAAvG,EAAoH;AAClHD,MAAAA,KAAK,CAACE,cAAN;;AACA,UAAIC,SAAS,CAACC,cAAV,KAA6B,WAA7B,IAA4CJ,KAAK,CAACC,GAAN,KAAc,YAA9D,EAA4E;AAAE;AAAQ;;AACtF,UAAIE,SAAS,CAACC,cAAV,KAA6B,YAA7B,IAA6CJ,KAAK,CAACC,GAAN,KAAc,WAA/D,EAA4E;AAAE;AAAQ;;AACtF,UAAIE,SAAS,CAACC,cAAV,KAA6B,SAA7B,IAA0CJ,KAAK,CAACC,GAAN,KAAc,WAA5D,EAAyE;AAAE;AAAQ;;AACnF,UAAIE,SAAS,CAACC,cAAV,KAA6B,WAA7B,IAA4CJ,KAAK,CAACC,GAAN,KAAc,SAA9D,EAAyE;AAAE;AAAQ;;AACnFE,MAAAA,SAAS,CAACC,cAAV,GAA2BJ,KAAK,CAACC,GAAjC;AACD;AACF,GATD;AAWA,MAAII,EAAE,GAAGP,QAAQ,CAACQ,eAAT,CAAyB,iBAAzB,EAA4C,CAA5C,CAAT;AACAD,EAAAA,EAAE,CAACN,gBAAH,CAAoB,YAApB,EAAkCQ,YAAlC;AAED;;AAED,SAASA,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,MAAGA,CAAC,CAACC,OAAL,EAAc;AACZC,IAAAA,OAAO,GAAGF,CAAC,CAACC,OAAF,CAAU,CAAV,EAAaE,KAAb,GAAqBC,MAAM,CAACC,UAA5B,GAAyCC,WAAW,GAAG,CAAjE;AACAC,IAAAA,OAAO,GAAGP,CAAC,CAACC,OAAF,CAAU,CAAV,EAAaO,KAAb,GAAqBJ,MAAM,CAACK,SAA5B,GAAwCC,YAAY,GAAG,CAAjE;AACAC,IAAAA,MAAM,CAACC,SAAP,GAAmB,YAAW,MAAX,GAAoBV,OAApB,GAA8B,OAA9B,GAAwCK,OAA3D;AACAP,IAAAA,CAAC,CAACN,cAAF;AACD;AACF;;AAED,MAAMmB,SAAN,CAAgB;AACdC,EAAAA,WAAW,GAAG;AACZ,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,GAAb;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAK3B,cAAL,GAAsB,YAAtB;AACA,SAAK4B,kBAAL,GAA0B,EAA1B;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,UAAL,GAAkB,GAAlB;AACA,SAAKC,WAAL,GAAmB,GAAnB;AACA,SAAKC,aAAL,GAAqB,CAArB;AAED,GAnBa,CAqBd;AACA;;;AACAC,EAAAA,QAAQ,GAAG;AACT1C,IAAAA,EAAE,CAAC2C,SAAH,CAAa,aAAb,EAA4BC,MAA5B;AACA5C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,QAAV,EAAoBC,KAApB,CAA0B,SAA1B,EAAqC,OAArC;AACA9C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,aAAV,EAAyBC,KAAzB,CAA+B,SAA/B,EAA0C,MAA1C;AACA9C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,QAAV,EAAoBD,MAApB;AACA5C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,WAAV,EAAuBD,MAAvB;AACA,SAAKd,QAAL,GAAgB,CAAC,CAAD,EAAG,CAAH,CAAhB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKE,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,GAAb;AACA,SAAKa,SAAL,GAAiB,CAAjB;AACA,SAAKvC,cAAL,GAAsB,YAAtB;AACA,SAAKuB,SAAL,CAAeiB,IAAf,CAAoB,KAAKlB,QAAzB;AACA,SAAKH,OAAL,GAAe,IAAf;AAEA1B,IAAAA,eAAe;AAEfD,IAAAA,EAAE,CAAC6C,MAAH,CAAU,aAAV,EACGI,MADH,CACU,KADV,EAEGC,IAFH,CAEQ,IAFR,EAEc,OAFd,EAGGA,IAHH,CAGQ,OAHR,EAGiB,KAAKX,UAHtB,EAIGW,IAJH,CAIQ,QAJR,EAIkB,KAAKV,WAJvB,EAKGS,MALH,CAKU,MALV,EAMGC,IANH,CAMQ,OANR,EAMiB,YANjB,EAOGA,IAPH,CAOQ,IAPR,EAOc,aAAa,KAAKnB,SAAL,CAAeoB,MAAf,GAAsB,CAAnC,CAPd,EAQGD,IARH,CAQQ,OARR,EAQiB,KAAKZ,UARtB,EASGY,IATH,CASQ,QATR,EASkB,KAAKZ,UATvB,EAUGY,IAVH,CAUQ,GAVR,EAUa,KAAKpB,QAAL,CAAc,CAAd,CAVb,EAWGoB,IAXH,CAWQ,GAXR,EAWa,KAAKpB,QAAL,CAAc,CAAd,CAXb,EAYGoB,IAZH,CAYQ,IAZR,EAYc,KAAKT,aAZnB,EAaGS,IAbH,CAaQ,IAbR,EAac,KAAKT,aAbnB,EAcGS,IAdH,CAcQ,MAdR,EAcgB,KAdhB,EAjBS,CAiCT;;AACAlD,IAAAA,EAAE,CAAC6C,MAAH,CAAU,cAAV,EACGO,IADH,CACQ,KAAKnB,KADb;AAGAjC,IAAAA,EAAE,CAAC6C,MAAH,CAAU,aAAV,EACGC,KADH,CACS,SADT,EACoB,OADpB;AAGA,SAAKO,SAAL;AACA,SAAKC,QAAL;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,QAAIC,MAAM,GAAG,KAAKlB,UAAlB;AACA,QAAImB,CAAC,GAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKrB,UAAnB,GAA8BiB,MAAzC,IAAiDA,MAAlD,GAA4DA,MAApE;AACA,QAAIK,CAAC,GAAIH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKpB,WAAnB,GAA+BgB,MAA1C,IAAkDA,MAAnD,GAA6DA,MAArE,CAHgB,CAIhB;;AACA,QAAIC,CAAC,GAAG,KAAKlB,UAAb,EAAyB;AAAEkB,MAAAA,CAAC,GAAG,KAAKlB,UAAL,GAAkBiB,MAAtB;AAA6B;;AACxD,QAAIC,CAAC,GAAG,CAAR,EAAW;AAAEA,MAAAA,CAAC,GAAG,CAAJ;AAAO;;AACpB,QAAII,CAAC,GAAG,KAAKrB,WAAb,EAA0B;AAACqB,MAAAA,CAAC,GAAG,KAAKrB,WAAL,GAAmBgB,MAAvB;AAA8B;;AACzD,QAAIK,CAAC,GAAG,CAAR,EAAW;AAAEA,MAAAA,CAAC,GAAG,CAAJ;AAAO;;AAEpB,WAAO,CAACJ,CAAD,EAAGI,CAAH,CAAP;AACD;;AAEDR,EAAAA,SAAS,GAAG;AACV,SAAKxB,QAAL,GAAgB,KAAK0B,eAAL,EAAhB;AAEAvD,IAAAA,EAAE,CAAC6C,MAAH,CAAU,QAAV,EAAoBI,MAApB,CAA2B,MAA3B,EACGC,IADH,CACQ,IADR,EACc,MADd,EAEGA,IAFH,CAEQ,OAFR,EAEiB,KAAKZ,UAFtB,EAGGY,IAHH,CAGQ,QAHR,EAGkB,KAAKZ,UAHvB,EAIGY,IAJH,CAIQ,GAJR,EAIa,KAAKrB,QAAL,CAAc,CAAd,CAJb,EAKGqB,IALH,CAKQ,GALR,EAKa,KAAKrB,QAAL,CAAc,CAAd,CALb,EAMGqB,IANH,CAMQ,IANR,EAMc,KAAKT,aANnB,EAOGS,IAPH,CAOQ,IAPR,EAOc,KAAKT,aAPnB,EAQGS,IARH,CAQQ,MARR,EAQgB,WARhB,EASGJ,KATH,CASS,SATT,EASoB,CATpB,EAUGgB,UAVH,GAWGC,QAXH,CAWY,IAXZ,EAYGjB,KAZH,CAYS,SAZT,EAYoB,CAZpB;AAcA,SAAKd,WAAL,GAAmB,IAAnB;AACD;;AAEDgC,EAAAA,SAAS,CAACC,KAAD,EAAQC,IAAR,EAAc;AACrBlE,IAAAA,EAAE,CAAC6C,MAAH,CAAU,aAAaoB,KAAvB,EACGf,IADH,CACQ,GADR,EACagB,IAAI,CAAC,CAAD,CADjB,EAEGhB,IAFH,CAEQ,GAFR,EAEagB,IAAI,CAAC,CAAD,CAFjB;;AAIA,QAAI,CAACD,KAAD,KAAW,KAAKlC,SAAL,CAAeoB,MAAf,GAAsB,CAArC,EAAwC;AACtC,UAAIgB,OAAO,GAAGF,KAAK,GAAG,CAAtB;AACA,UAAIG,OAAO,GAAG,KAAKrC,SAAL,CAAekC,KAAf,CAAd;AACA,WAAKD,SAAL,CAAeG,OAAf,EAAwBC,OAAxB;AACD;;AACD,SAAKrC,SAAL,CAAekC,KAAf,IAAwB,CAACC,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAxB;AACD;;AAEDG,EAAAA,QAAQ,GAAG;AACTC,IAAAA,YAAY,CAAC,KAAKjC,UAAN,CAAZ;AACAkC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,QAAG,CAAC,KAAK7C,OAAT,EAAkB;AAAE;AAAS;;AAC7B,SAAKA,OAAL,GAAe,KAAf,CAJS,CAMT;;AACA3B,IAAAA,EAAE,CAAC6C,MAAH,CAAU,OAAV,EAAmBiB,UAAnB,GACGC,QADH,CACY,IADZ,EAEGjB,KAFH,CAES,SAFT,EAEoB,CAFpB,EAGGF,MAHH;AAKA5C,IAAAA,EAAE,CAAC2C,SAAH,CAAa,QAAb,EAAuBmB,UAAvB,GACGC,QADH,CACY,IADZ,EAEGjB,KAFH,CAES,SAFT,EAEoB,CAFpB,EAGGF,MAHH;AAKA5C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,YAAV,EAAwBD,MAAxB;AAEA5C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,OAAV,EACGiB,UADH,GAEGC,QAFH,CAEY,IAFZ,EAGGjB,KAHH,CAGS,SAHT,EAGoB,CAHpB,EAIGF,MAJH;AAMA5C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,WAAV,EAAuBD,MAAvB;AACA5C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,aAAV,EACGI,MADH,CACU,IADV,EAEGG,IAFH,CAEQ,WAFR,EAGGF,IAHH,CAGQ,IAHR,EAGc,UAHd,EAIGJ,KAJH,CAIS,SAJT,EAIoB,CAJpB,EAKGgB,UALH,GAMGC,QANH,CAMY,IANZ,EAOGjB,KAPH,CAOS,SAPT,EAOoB,CAPpB;AASA9C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,aAAV,EACGC,KADH,CACS,SADT,EACoB,MADpB;AAGA9C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,aAAV,EACGC,KADH,CACS,SADT,EACoB,OADpB;AAGD;;AAEDQ,EAAAA,QAAQ,GAAG;AACT,QAAG,KAAKmB,MAAR,EAAgB;AACd;AACD;;AACD,SAAK7C,KAAL;;AACA,QAAG,KAAKpB,cAAL,KAAwB,WAA3B,EAAwC;AACtC,WAAKsB,QAAL,CAAc,CAAd,IAAmB,KAAKA,QAAL,CAAc,CAAd,IAAmB,KAAKQ,UAA3C;AACD,KAFD,MAEM,IAAG,KAAK9B,cAAL,KAAwB,SAA3B,EAAsC;AAC1C,WAAKsB,QAAL,CAAc,CAAd,IAAmB,KAAKA,QAAL,CAAc,CAAd,IAAmB,KAAKQ,UAA3C;AACD,KAFK,MAEA,IAAG,KAAK9B,cAAL,KAAwB,YAA3B,EAAyC;AAC7C,WAAKsB,QAAL,CAAc,CAAd,IAAmB,KAAKA,QAAL,CAAc,CAAd,IAAmB,KAAKQ,UAA3C;AACD,KAFK,MAEA,IAAG,KAAK9B,cAAL,KAAwB,WAA3B,EAAwC;AAC5C,WAAKsB,QAAL,CAAc,CAAd,IAAmB,KAAKA,QAAL,CAAc,CAAd,IAAmB,KAAKQ,UAA3C;AACD,KAbQ,CAcT;;;AACA,SAAKH,SAAL,GAAiB,CAAC,KAAKJ,SAAL,CAAe,KAAKA,SAAL,CAAeoB,MAAf,GAAsB,CAArC,EAAwC,CAAxC,CAAD,EAA6C,KAAKpB,SAAL,CAAe,KAAKA,SAAL,CAAeoB,MAAf,GAAsB,CAArC,EAAwC,CAAxC,CAA7C,CAAjB;AAEA,SAAKa,SAAL,CAAe,CAAf,EAAkB,KAAKlC,QAAvB;;AAEA,QAAI,KAAKD,QAAL,CAAcsB,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,UAAG,KAAKtB,QAAL,CAAc,CAAd,MAAqB,KAAKC,QAAL,CAAc,CAAd,CAArB,IAAyC,KAAKD,QAAL,CAAc,CAAd,MAAqB,KAAKC,QAAL,CAAc,CAAd,CAAjE,EAAmF;AACjFyC,QAAAA,OAAO,CAACG,IAAR,CAAa,eAAb;AACA,aAAKzC,KAAL;;AACA,YAAI,KAAKC,KAAL,GAAa,GAAjB,EAAsB;AACpB,eAAKA,KAAL,GAAa,KAAKA,KAAL,GAAW,EAAxB;AACD;;AAEDlC,QAAAA,EAAE,CAAC6C,MAAH,CAAU,cAAV,EACGO,IADH,CACQ,KAAKnB,KADb;AAGAjC,QAAAA,EAAE,CAAC6C,MAAH,CAAU,OAAV,EAAmBD,MAAnB;AACA,aAAKZ,WAAL,GAAmB,KAAnB;AAEA,aAAKD,SAAL,CAAeiB,IAAf,CAAoB,KAAKb,SAAzB;AAEAnC,QAAAA,EAAE,CAAC6C,MAAH,CAAU,QAAV,EAAoBI,MAApB,CAA2B,MAA3B,EACGC,IADH,CACQ,OADR,EACiB,OADjB,EAEGA,IAFH,CAEQ,IAFR,EAEc,aAAa,KAAKnB,SAAL,CAAeoB,MAAf,GAAsB,CAAnC,CAFd,EAGGD,IAHH,CAGQ,OAHR,EAGiB,KAAKZ,UAHtB,EAIGY,IAJH,CAIQ,QAJR,EAIkB,KAAKZ,UAJvB,EAKGY,IALH,CAKQ,GALR,EAKa,KAAKf,SAAL,CAAe,CAAf,CALb,EAMGe,IANH,CAMQ,GANR,EAMa,KAAKf,SAAL,CAAe,CAAf,CANb,EAOGe,IAPH,CAOQ,IAPR,EAOc,KAAKT,aAPnB,EAQGS,IARH,CAQQ,IARR,EAQc,KAAKT,aARnB,EASGS,IATH,CASQ,MATR,EASgB,QAThB;AAUD;AACF;;AAED,QAAG,KAAKtB,KAAL,GAAW,CAAX,KAAiB,CAAjB,IAAsB,CAAC,KAAKI,WAA/B,EAA4C;AAC1C,WAAKqB,SAAL;AACD,KAlDQ,CAoDT;;;AACA,QAAG,KAAKsB,UAAL,KAAoBC,SAAvB,EAAkC;AAChC,WAAKD,UAAL,GAAkB,IAAIE,UAAJ,CAAe,IAAf,CAAlB;AACD,KAvDQ,CAyDT;;;AACA,QAAI,KAAKF,UAAL,CAAgBG,QAApB,EAA8B;AAC5B;AACA;AACA,UAAIC,SAAS,GAAGrB,IAAI,CAACC,KAAL,CAAW,OAAK,KAAKzB,KAArB,CAAhB;;AACA,UAAI,CAAC,KAAKyC,UAAL,CAAgB5B,SAAjB,GAA6B,CAA7B,IAAkC,KAAKnB,KAAL,GAAWmD,SAAX,KAAyB,CAA/D,EAAkE;AAChE,aAAKJ,UAAL,CAAgB5B,SAAhB,GAA4B,KAAK4B,UAAL,CAAgB5B,SAAhB,GAA4B,CAAxD;AACA/C,QAAAA,EAAE,CAAC6C,MAAH,CAAU,YAAV,EACGO,IADH,CACQ,KAAKuB,UAAL,CAAgB5B,SADxB;AAED,OAJD,MAIO,IAAI,KAAK4B,UAAL,CAAgB5B,SAAhB,IAA6B,CAAjC,EAAmC;AACxC;AACAwB,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,aAAKG,UAAL,CAAgBK,YAAhB;AACD;AACF,KAvEQ,CAyET;;;AACA,QAAG,KAAK/C,KAAL,GAAa,CAAb,IAAkB,KAAKL,KAAL,GAAW,EAAX,KAAkB,CAApC,IAAyC,CAAC,KAAK+C,UAAL,CAAgBG,QAA7D,EAAuE;AACrE,WAAKH,UAAL,CAAgBM,SAAhB;AACD,KA5EQ,CA8ET;;;AACA,QAAG,KAAKnD,QAAL,CAAc,CAAd,KAAoB,KAAKS,UAAzB,IAAuC,KAAKT,QAAL,CAAc,CAAd,IAAmB,CAA1D,CAA4D;AAA5D,OACE,KAAKA,QAAL,CAAc,CAAd,IAAmB,CADrB,IAC0B,KAAKA,QAAL,CAAc,CAAd,KAAoB,KAAKU,WADtD,EACmE;AAAE;AACnE+B,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,WAAKH,QAAL;AACA;AACD;;AACD,SAAK,IAAIa,OAAT,IAAoB,KAAKnD,SAAzB,EAAoC;AAClC,UAAI,KAAKA,SAAL,CAAeoD,OAAf,CAAuBD,OAAvB,MAAoC,CAAxC,EAA2C;AACzC;AACD;;AACD,UAAG,KAAKpD,QAAL,CAAc,CAAd,MAAqBoD,OAAO,CAAC,CAAD,CAA5B,IAAmC,KAAKpD,QAAL,CAAc,CAAd,MAAqBoD,OAAO,CAAC,CAAD,CAAlE,EAAuE;AACrEX,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,aAAKH,QAAL;AACA;AACD;AACF;;AAED,QAAIe,IAAI,GAAG,IAAX;AACA,SAAK/C,UAAL,GAAkBgD,UAAU,CAAC,YAAW;AACtCD,MAAAA,IAAI,CAAC9B,QAAL;AACD,KAF2B,EAEzB8B,IAAI,CAAClD,KAFoB,CAA5B;AAGD;;AAhQa;;AAoQhB,MAAM2C,UAAN,CAAiB;AACfnD,EAAAA,WAAW,CAACnB,SAAD,EAAY;AACrB,SAAKA,SAAL,GAAiBA,SAAjB;AAEA,SAAK+E,QAAL,GAAgB,EAAhB;AACA,SAAKR,QAAL,GAAgB,KAAhB;AACA,SAAK/B,SAAL,GAAiB,CAAjB;AACA,SAAKwC,eAAL,GAAuB,CAAvB;AACD;;AAEDN,EAAAA,SAAS,GAAG;AACV,SAAKK,QAAL,GAAgB,KAAK/E,SAAL,CAAegD,eAAf,EAAhB;AACA,SAAKR,SAAL,GAAiB,CAAjB;AACA/C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,QAAV,EAAoBI,MAApB,CAA2B,MAA3B,EACGC,IADH,CACQ,IADR,EACc,MADd,EAEGA,IAFH,CAEQ,OAFR,EAEiB,KAAK3C,SAAL,CAAe+B,UAFhC,EAGGY,IAHH,CAGQ,QAHR,EAGkB,KAAK3C,SAAL,CAAe+B,UAHjC,EAIGY,IAJH,CAIQ,GAJR,EAIa,KAAKoC,QAAL,CAAc,CAAd,CAJb,EAKGpC,IALH,CAKQ,GALR,EAKa,KAAKoC,QAAL,CAAc,CAAd,CALb,EAMGpC,IANH,CAMQ,IANR,EAMc,KAAK3C,SAAL,CAAekC,aAN7B,EAOGS,IAPH,CAOQ,IAPR,EAOc,KAAK3C,SAAL,CAAekC,aAP7B,EAQGS,IARH,CAQQ,MARR,EAQgB,QARhB,EASGJ,KATH,CASS,SATT,EASoB,CATpB,EAUGI,IAVH,CAUQ,QAVR,EAUkB,KAVlB,EAWGY,UAXH,GAYGC,QAZH,CAYY,IAZZ,EAaGjB,KAbH,CAaS,SAbT,EAaoB,CAbpB;AAeA9C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,QAAV,EAAoBI,MAApB,CAA2B,MAA3B,EACGC,IADH,CACQ,IADR,EACc,WADd,EAEGE,IAFH,CAEQ,KAAKL,SAFb,EAGGD,KAHH,CAGS,MAHT,EAGiB,OAHjB,EAIGA,KAJH,CAIS,WAJT,EAIsB,KAJtB,EAKGI,IALH,CAKQ,WALR,EAKqB,gBAAc,KAAKoC,QAAL,CAAc,CAAd,IAAiB,KAAK/E,SAAL,CAAe+B,UAAf,GAA0B,CAAzD,IAA4D,GAA5D,IAAiE,KAAKgD,QAAL,CAAc,CAAd,IAAiB,KAAK/E,SAAL,CAAe+B,UAAhC,GAA2C,CAA5G,IAA+G,GALpI;AAOA,SAAKwC,QAAL,GAAgB,IAAhB;AACD;;AAEDE,EAAAA,YAAY,GAAI;AAEd,QAAIQ,UAAU,GAAGxF,EAAE,CAACyF,WAAH,GACdC,MADc,CACP,CAAC,CAAD,EAAI,KAAKH,eAAT,CADO,EAEdI,KAFc,CAER,CAAC,KAAD,EAAQ,QAAR,CAFQ,CAAjB;AAIA,QAAIC,aAAa,GAAG,EAApB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,KAAKN,eAAzB,EAA0CM,CAAC,EAA3C,EAA+C;AAC7C,UAAIC,KAAK,GAAG,KAAKR,QAAjB;;AACA,WAAI,IAAIS,IAAI,GAAG,CAACF,CAAhB,EAAmBE,IAAI,IAAIF,CAA3B,EAA8BE,IAAI,EAAlC,EAAsC;AACpC,aAAI,IAAIC,IAAI,GAAG,CAACH,CAAhB,EAAmBG,IAAI,IAAIH,CAA3B,EAA8BG,IAAI,EAAlC,EAAsC;AACpC,cAAIC,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAL,GAAYC,IAAI,GAAC,KAAKxF,SAAL,CAAe+B,UAA3C;AACA,cAAI4D,IAAI,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAYE,IAAI,GAAC,KAAKzF,SAAL,CAAe+B,UAA3C;AACA,cAAI6D,OAAO,GAAG,CAACF,IAAD,EAAOC,IAAP,CAAd;;AACA,cAAG,CAACN,aAAa,CAACQ,QAAd,CAAuBD,OAAvB,CAAJ,EAAqC;AACnCP,YAAAA,aAAa,CAAC5C,IAAd,CAAmBmD,OAAnB;AACD;AACF;AACF;AACF;;AACD,SAAI,IAAIE,KAAR,IAAiBT,aAAjB,EAAgC;AAC9B;AACA,UAAIU,QAAQ,GAAGC,qBAAqB,CAAC,KAAKjB,QAAN,EAAgBe,KAAhB,CAArB,GAA4C,KAAK9F,SAAL,CAAe+B,UAA1E;AAEAtC,MAAAA,EAAE,CAAC6C,MAAH,CAAU,QAAV,EAAoBI,MAApB,CAA2B,MAA3B,EACGC,IADH,CACQ,OADR,EACiB,MADjB,EAEGA,IAFH,CAEQ,OAFR,EAEiB,KAAK3C,SAAL,CAAe+B,UAFhC,EAGGY,IAHH,CAGQ,QAHR,EAGkB,KAAK3C,SAAL,CAAe+B,UAHjC,EAIGY,IAJH,CAIQ,GAJR,EAIamD,KAAK,CAAC,CAAD,CAJlB,EAKGnD,IALH,CAKQ,GALR,EAKamD,KAAK,CAAC,CAAD,CALlB,EAMGnD,IANH,CAMQ,IANR,EAMc,KAAK3C,SAAL,CAAekC,aAN7B,EAOGS,IAPH,CAOQ,IAPR,EAOc,KAAK3C,SAAL,CAAekC,aAP7B,EAQGS,IARH,CAQQ,MARR,EAQgBsC,UAAU,CAACc,QAAD,CAR1B,EASGxD,KATH,CASS,SATT,EASoB,CATpB,EAUGI,IAVH,CAUQ,QAVR,EAUkB,KAVlB,EAWGY,UAXH,GAYGC,QAZH,CAYY,IAZZ,EAaGjB,KAbH,CAaS,SAbT,EAaoB,CAbpB,EAcGI,IAdH,CAcQ,MAdR,EAcgB,MAdhB,EAeGA,IAfH,CAeQ,OAfR,EAeiB,CAfjB,EAgBGA,IAhBH,CAgBQ,QAhBR,EAgBkB,CAhBlB,EAiBGN,MAjBH;AAkBD;;AAED5C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,YAAV,EAAwBD,MAAxB;AACA5C,IAAAA,EAAE,CAAC6C,MAAH,CAAU,OAAV,EACGiB,UADH,GAEGC,QAFH,CAEY,IAFZ,EAGGjB,KAHH,CAGS,SAHT,EAGoB,CAHpB,EAIGF,MAJH;AAMA,SAAKG,SAAL,GAAiB,CAAjB;AACA,SAAK+B,QAAL,GAAgB,KAAhB;AAEA,SAAK0B,iBAAL;AACD;;AAEDA,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,KAAK,GAAG,KAAKlB,eAAjB;AACA,QAAI/B,MAAM,GAAG,KAAKjD,SAAL,CAAe+B,UAA5B;AACA,QAAIoE,eAAe,GAAG,CAAC,KAAKpB,QAAL,CAAc,CAAd,IAAiB9B,MAAM,GAACiD,KAAzB,EAAgC,KAAKnB,QAAL,CAAc,CAAd,IAAiB9B,MAAM,GAACiD,KAAxD,CAAtB;AACA,QAAIE,eAAe,GAAG,CAAC,KAAKrB,QAAL,CAAc,CAAd,IAAiB9B,MAAM,GAACiD,KAAzB,EAAgC,KAAKnB,QAAL,CAAc,CAAd,IAAiB9B,MAAM,GAACiD,KAAxD,CAAtB;AACA,QAAIG,OAAO,GAAG,KAAKrG,SAAL,CAAeuB,QAAf,CAAwB,CAAxB,KAA8B4E,eAAe,CAAC,CAAD,CAA7C,IAAoD,KAAKnG,SAAL,CAAeuB,QAAf,CAAwB,CAAxB,KAA8B4E,eAAe,CAAC,CAAD,CAA/G;AACA,QAAIG,OAAO,GAAG,KAAKtG,SAAL,CAAeuB,QAAf,CAAwB,CAAxB,KAA8B6E,eAAe,CAAC,CAAD,CAA7C,IAAoD,KAAKpG,SAAL,CAAeuB,QAAf,CAAwB,CAAxB,KAA8B6E,eAAe,CAAC,CAAD,CAA/G;;AACA,QAAIC,OAAO,IAAIC,OAAf,EAAwB;AACtBtC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WAAKjE,SAAL,CAAe8D,QAAf;AACD;AACF;;AA1Gc;;AA8GjB,SAASkC,qBAAT,CAAgCO,MAAhC,EAAwCC,MAAxC,EAAgD;AAC9C,MAAIC,EAAE,GAAGF,MAAM,CAAC,CAAD,CAAf;AACA,MAAIG,EAAE,GAAGF,MAAM,CAAC,CAAD,CAAf;AACA,MAAIG,EAAE,GAAGJ,MAAM,CAAC,CAAD,CAAf;AACA,MAAIK,EAAE,GAAGJ,MAAM,CAAC,CAAD,CAAf;AACA,MAAItD,CAAC,GAAGC,IAAI,CAAC0D,GAAL,CAAUH,EAAE,GAACD,EAAb,EAAkB,CAAlB,CAAR;AACA,MAAInD,CAAC,GAAGH,IAAI,CAAC0D,GAAL,CAAUD,EAAE,GAACD,EAAb,EAAkB,CAAlB,CAAR;AACA,MAAIZ,QAAQ,GAAG5C,IAAI,CAAC0D,GAAL,CAAU3D,CAAC,GAAGI,CAAd,EAAkB,GAAlB,CAAf;AAEA,SAAOyC,QAAP;AACD;;AAED,IAAI/F,SAAS,GAAG,IAAIkB,SAAJ,EAAhB;AACA,OAAO,SAAS4F,cAAT,GAA0B;AAC/B9C,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAjE,EAAAA,SAAS,CAACmC,QAAV;AACD;AAED,OAAO,SAAS4E,cAAT,GAA0B;AAC/B,MAAI/G,SAAS,CAACkE,MAAd,EAAsB;AACpBlE,IAAAA,SAAS,CAACkE,MAAV,GAAmB,KAAnB;AACAlE,IAAAA,SAAS,CAAC+C,QAAV;AACD,GAHD,MAGO;AACL/C,IAAAA,SAAS,CAACkE,MAAV,GAAmB,IAAnB;AACD;AAEF","sourcesContent":["import * as d3 from \"d3\";\n\n\nfunction initKeyBindings () {\n  document.addEventListener('keydown', (event) => {\n    if(event.key === 'ArrowLeft' || event.key === 'ArrowUp' || event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n      event.preventDefault();\n      if (snakeGame.snakeDirection === 'ArrowLeft' && event.key === 'ArrowRight') { return }\n      if (snakeGame.snakeDirection === 'ArrowRight' && event.key === 'ArrowLeft') { return }\n      if (snakeGame.snakeDirection === 'ArrowUp' && event.key === 'ArrowDown') { return }\n      if (snakeGame.snakeDirection === 'ArrowDown' && event.key === 'ArrowUp') { return }\n      snakeGame.snakeDirection = event.key;\n    }\n  });\n\n  let el = document.getElementsById(\"snake-container\")[0];\n  el.addEventListener(\"touchstart\", touchHandler);\n\n}\n\nfunction touchHandler(e) {\n  if(e.touches) {\n    playerX = e.touches[0].pageX - canvas.offsetLeft - playerWidth / 2;\n    playerY = e.touches[0].pageY - canvas.offsetTop - playerHeight / 2;\n    output.innerHTML = \"Touch: \"+ \" x: \" + playerX + \", y: \" + playerY;\n    e.preventDefault();\n  }\n}\n\nclass SnakeGame {\n  constructor() {\n    this.playing = false;\n    this.count = 0;\n    this.foodCord = [];\n    this.headCord = [];\n    this.snakeBody = [];\n    this.foodOnBoard = false;\n    this.score = 0;\n    this.speed = 200;\n    this.snakeTail = [];\n    this.snakeDirection = 'ArrowRight';\n    this.lastSnakeDirection = '';\n    this.gameTicker = \"\";\n    this.segmentDim = 10;\n    this.boardWidth = 300;\n    this.boardHeight = 300;\n    this.segmentRadius = 5;\n\n  }\n\n  // Might be a better way to do this.\n  // put into another class and simply reset?\n  initGame() {\n    d3.selectAll(\".game-intro\").remove();\n    d3.select('#score').style(\"display\", \"block\")\n    d3.select('#start-game').style(\"display\", \"none\")\n    d3.select('#board').remove();\n    d3.select('#end-text').remove();\n    this.headCord = [0,0];\n    this.snakeBody = [];\n    this.score = 0;\n    this.speed = 200;\n    this.bombCount = 0\n    this.snakeDirection = 'ArrowRight';\n    this.snakeBody.push(this.headCord);\n    this.playing = true;\n\n    initKeyBindings();\n\n    d3.select('#game-space')\n      .append('svg')\n      .attr('id', 'board')\n      .attr('width', this.boardWidth)\n      .attr('height', this.boardHeight)\n      .append('rect')\n      .attr('class', 'snake head')\n      .attr(\"id\", \"segment\" + (this.snakeBody.length-1))\n      .attr('width', this.segmentDim)\n      .attr('height', this.segmentDim)\n      .attr('x', this.headCord[0])\n      .attr('y', this.headCord[1])\n      .attr(\"ry\", this.segmentRadius)\n      .attr(\"rx\", this.segmentRadius)\n      .attr('fill', 'red')\n\n    // do this with d3\n    d3.select('#score-count')\n      .text(this.score)\n\n    d3.select('#pause-game')\n      .style(\"display\", \"block\")\n\n    this.spawnFood();\n    this.gameTick();\n  }\n\n  randomBoardCord() {\n    let segDim = this.segmentDim;\n    let x = (Math.round(Math.random()*this.boardWidth/segDim)*segDim) - segDim;\n    let y = (Math.round(Math.random()*this.boardHeight/segDim)*segDim) - segDim;\n    // keep food on map\n    if (x > this.boardWidth) { x = this.boardWidth - segDim}\n    if (x < 0) { x = 0 }\n    if (y > this.boardHeight) {y = this.boardHeight - segDim}\n    if (y < 0) { y = 0 }\n\n    return [x,y];\n  }\n\n  spawnFood() {\n    this.foodCord = this.randomBoardCord()\n\n    d3.select('#board').append('rect')\n      .attr(\"id\", \"food\")\n      .attr(\"width\", this.segmentDim)\n      .attr(\"height\", this.segmentDim)\n      .attr(\"x\", this.foodCord[0])\n      .attr(\"y\", this.foodCord[1])\n      .attr(\"ry\", this.segmentRadius)\n      .attr(\"rx\", this.segmentRadius)\n      .attr(\"fill\", \"limegreen\")\n      .style(\"opacity\", 0)\n      .transition()\n      .duration(1000)\n      .style(\"opacity\", 1)\n\n    this.foodOnBoard = true;\n  }\n\n  moveSnake(index, cord) {\n    d3.select('#segment' + index)\n      .attr(\"x\", cord[0])\n      .attr(\"y\", cord[1]);\n\n    if (+index !== this.snakeBody.length-1) {\n      let nextIdx = index + 1;\n      let oldCord = this.snakeBody[index];\n      this.moveSnake(nextIdx, oldCord)\n    }\n    this.snakeBody[index] = [cord[0], cord[1]];\n  }\n\n  gameLost() {\n    clearTimeout(this.gameTicker);\n    console.log('Game over.')\n    if(!this.playing) { return; }\n    this.playing = false;\n\n    // remove old stuff and show game over\n    d3.select('#food').transition()\n      .duration(1000)\n      .style(\"opacity\", 0)\n      .remove();\n\n    d3.selectAll(\".snake\").transition()\n      .duration(1000)\n      .style(\"opacity\", 0)\n      .remove();\n\n    d3.select('#bomb-text').remove();\n\n    d3.select('#bomb')\n      .transition()\n      .duration(1000)\n      .style(\"opacity\", 0)\n      .remove();\n\n    d3.select('#end-text').remove();\n    d3.select('#game-space')\n      .append('h3')\n      .text('GAME OVER')\n      .attr('id', 'end-text')\n      .style(\"opacity\", 0)\n      .transition()\n      .duration(1000)\n      .style(\"opacity\", 1)\n\n    d3.select('#pause-game')\n      .style(\"display\", \"none\")\n\n    d3.select('#start-game')\n      .style(\"display\", \"block\")\n      \n  }\n\n  gameTick() {\n    if(this.paused) {\n      return\n    }\n    this.count++;\n    if(this.snakeDirection === 'ArrowLeft') {\n      this.headCord[0] = this.headCord[0] - this.segmentDim;\n    }else if(this.snakeDirection === 'ArrowUp') {\n      this.headCord[1] = this.headCord[1] - this.segmentDim;\n    }else if(this.snakeDirection === 'ArrowRight') {\n      this.headCord[0] = this.headCord[0] + this.segmentDim;\n    }else if(this.snakeDirection === 'ArrowDown') {\n      this.headCord[1] = this.headCord[1] + this.segmentDim;\n    }\n    //headCord = [0,0]\n    this.snakeTail = [this.snakeBody[this.snakeBody.length-1][0], this.snakeBody[this.snakeBody.length-1][1]];\n\n    this.moveSnake(0, this.headCord);\n\n    if (this.foodCord.length > 0) {\n      if(this.foodCord[0] === this.headCord[0] && this.foodCord[1] === this.headCord[1]) {\n        console.warn('FOOD EATEN!!!')\n        this.score++;\n        if (this.speed > 100) {\n          this.speed = this.speed-10;\n        }\n\n        d3.select(\"#score-count\")\n          .text(this.score)\n\n        d3.select('#food').remove();\n        this.foodOnBoard = false;\n\n        this.snakeBody.push(this.snakeTail)\n\n        d3.select('#board').append('rect')\n          .attr(\"class\", \"snake\")\n          .attr(\"id\", \"segment\" + (this.snakeBody.length-1))\n          .attr(\"width\", this.segmentDim)\n          .attr(\"height\", this.segmentDim)\n          .attr(\"x\", this.snakeTail[0])\n          .attr(\"y\", this.snakeTail[1])\n          .attr(\"ry\", this.segmentRadius)\n          .attr(\"rx\", this.segmentRadius)\n          .attr(\"fill\", \"purple\");\n      }\n    }\n\n    if(this.count%5 === 0 && !this.foodOnBoard) {\n      this.spawnFood();\n    }\n\n    // put bomb stuff in seperate function\n    if(this.snakeBombs === undefined) {\n      this.snakeBombs = new SnakeBombs(this);\n    }\n\n    // bomb tick\n    if (this.snakeBombs.liveBomb) {\n      //console.log('This bomb is ticking...', this.snakeBombs.bombCount)\n      // count down in seconds\n      let slowCount = Math.round(1000/this.speed);\n      if (+this.snakeBombs.bombCount > 0 && this.count%slowCount === 1) {\n        this.snakeBombs.bombCount = this.snakeBombs.bombCount - 1;\n        d3.select('#bomb-text')\n          .text(this.snakeBombs.bombCount)\n      } else if (this.snakeBombs.bombCount <= 0){\n        // boom\n        console.log(\"Boom!\")\n        this.snakeBombs.bombGoesBoom();\n      }\n    }\n\n    // spawn bomb\n    if(this.score > 0 && this.count%10 === 0 && !this.snakeBombs.liveBomb) {\n      this.snakeBombs.spawnBomb();\n    }\n\n    // losing conditions\n    if(this.headCord[0] >= this.boardWidth || this.headCord[0] < 0 // off the sides \n      || this.headCord[1] < 0 || this.headCord[1] >= this.boardHeight) { // off the top or bottom\n      console.log('Snakes out of the box!')\n      this.gameLost();\n      return\n    }\n    for (let segment of this.snakeBody) {\n      if (this.snakeBody.indexOf(segment) === 0) {\n        continue\n      }\n      if(this.headCord[0] === segment[0] && this.headCord[1] === segment[1]) {\n        console.log('You bit your own tail...')\n        this.gameLost()\n        return\n      }\n    }\n\n    let that = this;\n    this.gameTicker = setTimeout(function() {\n      that.gameTick()\n    }, that.speed);\n  }\n\n}\n\nclass SnakeBombs {\n  constructor(snakeGame) {\n    this.snakeGame = snakeGame;\n\n    this.bombCord = [];\n    this.liveBomb = false;\n    this.bombCount = 0;\n    this.explosionRadius = 2;\n  }\n\n  spawnBomb() {\n    this.bombCord = this.snakeGame.randomBoardCord();\n    this.bombCount = 5;\n    d3.select('#board').append('rect')\n      .attr(\"id\", \"bomb\")\n      .attr(\"width\", this.snakeGame.segmentDim)\n      .attr(\"height\", this.snakeGame.segmentDim)\n      .attr(\"x\", this.bombCord[0])\n      .attr(\"y\", this.bombCord[1])\n      .attr(\"ry\", this.snakeGame.segmentRadius)\n      .attr(\"rx\", this.snakeGame.segmentRadius)\n      .attr(\"fill\", \"orange\")\n      .style(\"opacity\", 0)\n      .attr(\"stroke\", \"red\")\n      .transition()\n      .duration(1000)\n      .style(\"opacity\", 1)\n\n    d3.select('#board').append('text')\n      .attr('id', 'bomb-text')\n      .text(this.bombCount)\n      .style('fill', 'black')\n      .style('font-size', '65%')\n      .attr(\"transform\", \"translate(\"+(this.bombCord[0]+this.snakeGame.segmentDim/4)+\",\"+(this.bombCord[1]+this.snakeGame.segmentDim-1)+\")\");\n\n    this.liveBomb = true;\n  }\n\n  bombGoesBoom () {\n    \n    let colorScale = d3.scaleLinear()\n      .domain([0, this.explosionRadius])\n      .range(['red', 'yellow']);\n\n    let explosionArea = [];\n    for(let i = 1; i <= this.explosionRadius; i++) {\n      let start = this.bombCord;\n      for(let xDim = -i; xDim <= i; xDim++) {\n        for(let yDim = -i; yDim <= i; yDim++) {\n          let newX = start[0] + (xDim*this.snakeGame.segmentDim)\n          let newY = start[1] + (yDim*this.snakeGame.segmentDim)\n          let newCord = [newX, newY];\n          if(!explosionArea.includes(newCord)) {\n            explosionArea.push(newCord)\n          }\n        }\n      }\n    }\n    for(let block of explosionArea) {\n      // distance in block units\n      let distance = distanceBetweenPoints(this.bombCord, block)/this.snakeGame.segmentDim\n\n      d3.select('#board').append('rect')\n        .attr(\"class\", \"boom\")\n        .attr(\"width\", this.snakeGame.segmentDim)\n        .attr(\"height\", this.snakeGame.segmentDim)\n        .attr(\"x\", block[0])\n        .attr(\"y\", block[1])\n        .attr(\"ry\", this.snakeGame.segmentRadius)\n        .attr(\"rx\", this.snakeGame.segmentRadius)\n        .attr(\"fill\", colorScale(distance))\n        .style(\"opacity\", 1)\n        .attr(\"stroke\", \"red\")\n        .transition()\n        .duration(1500)\n        .style(\"opacity\", 0)\n        .attr(\"fill\", \"blue\")\n        .attr(\"width\", 1)\n        .attr(\"height\", 1)\n        .remove();\n    }\n\n    d3.select('#bomb-text').remove();\n    d3.select('#bomb')\n      .transition()\n      .duration(1500)\n      .style(\"opacity\", 0)\n      .remove();\n\n    this.bombCount = 0;\n    this.liveBomb = false;\n\n    this.isHeadInExplosion()\n  }\n\n  isHeadInExplosion() {\n    let bombR = this.explosionRadius;\n    let segDim = this.snakeGame.segmentDim;\n    let explosionXRange = [this.bombCord[0]-segDim*bombR, this.bombCord[0]+segDim*bombR];\n    let explosionYRange = [this.bombCord[1]-segDim*bombR, this.bombCord[1]+segDim*bombR];\n    let detectX = this.snakeGame.headCord[0] >= explosionXRange[0] && this.snakeGame.headCord[0] <= explosionXRange[1];\n    let detectY = this.snakeGame.headCord[1] >= explosionYRange[0] && this.snakeGame.headCord[1] <= explosionYRange[1];\n    if (detectX && detectY) {\n      console.log(\"Ouch, killed by a bomb...\")\n      this.snakeGame.gameLost();\n    }\n  }\n  \n}\n\nfunction distanceBetweenPoints (pointA, pointB) {\n  let x0 = pointA[0];\n  let x1 = pointB[0];\n  let y0 = pointA[1];\n  let y1 = pointB[1];\n  let x = Math.pow((x1-x0), 2);\n  let y = Math.pow((y1-y0), 2)\n  let distance = Math.pow((x + y), 0.5);\n\n  return distance;\n}\n\nlet snakeGame = new SnakeGame();\nexport function startSnakeGame() {\n  console.log('startSnakeGame: Start game!!')\n  snakeGame.initGame()\n}\n\nexport function pauseSnakeGame() {\n  if (snakeGame.paused) {\n    snakeGame.paused = false;\n    snakeGame.gameTick();\n  } else {\n    snakeGame.paused = true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}