{"ast":null,"code":"var _jsxFileName = \"/Users/williamvennard/willvennard.github.io/src/Map.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\"; // import SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\n\nGeocode.setApiKey(process.env.REACT_APP_API_KEY);\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      console.warn(\"getCity: addressArray\", addressArray);\n      let city = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && \"administrative_area_level_2\" === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if (\"sublocality_level_1\" === addressArray[i].types[j] || \"locality\" === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && \"administrative_area_level_1\" === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {\n      console.warn(\"Infow window has been closed!!!\", event);\n    };\n\n    this.onPlaceSelected = place => {\n      console.warn(\"place =\", place);\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\",\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log(\"event\", event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n\n\n  componentDidMount() {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      let that = this;\n      navigator.geolocation.getCurrentPosition(function (position) {\n        that.state.mapPosition.lat = position.coords.latitude;\n        that.state.mapPosition.lng = position.coords.longitude;\n        that.next();\n      }, function () {\n        console.warn(\"getCurrentPosition: Error!\");\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      console.warn(\"Browser doesn't support Geolocation\");\n    }\n  }\n\n  next() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log(\"city\", city, area, state);\n      this.setState({\n        address: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\"\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * Get the city and set the city input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      google: this.props.google,\n      name: \"Dolores park\",\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0,\n        color: \"black\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\" + process.env.REACT_APP_API_KEY + \"&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height,\n            width: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 290\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          marginTop: `50px`,\n          marginBottom: `50px`\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }))));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/williamvennard/willvennard.github.io/src/Map.js"],"names":["React","Component","ReactDOM","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","process","env","REACT_APP_API_KEY","enableDebug","Map","constructor","props","getCity","addressArray","console","warn","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","address_components","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","log","newLat","latLng","newLng","fromLatLng","then","response","results","error","center","componentDidMount","navigator","geolocation","that","getCurrentPosition","position","coords","latitude","longitude","next","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","padding","margin","color","map","undefined","height","width","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  withGoogleMap,\n  GoogleMap,\n  withScriptjs,\n  InfoWindow,\n  Marker,\n} from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\n// import SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\nGeocode.setApiKey(process.env.REACT_APP_API_KEY);\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng,\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng,\n      },\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n  componentDidMount() {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      let that = this;\n      navigator.geolocation.getCurrentPosition(\n        function (position) {\n          that.state.mapPosition.lat = position.coords.latitude;\n          that.state.mapPosition.lng = position.coords.longitude;\n          that.next();\n        },\n        function () {\n          console.warn(\"getCurrentPosition: Error!\");\n        }\n      );\n    } else {\n      // Browser doesn't support Geolocation\n      console.warn(\"Browser doesn't support Geolocation\");\n    }\n  }\n\n  next() {\n    Geocode.fromLatLng(\n      this.state.mapPosition.lat,\n      this.state.mapPosition.lng\n    ).then(\n      (response) => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n        console.log(\"city\", city, area, state);\n\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\",\n        });\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  }\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.state.markerPosition.lat !== this.props.center.lat ||\n      this.state.address !== nextState.address ||\n      this.state.city !== nextState.city ||\n      this.state.area !== nextState.area ||\n      this.state.state !== nextState.state\n    ) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * Get the city and set the city input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getCity = (addressArray) => {\n    console.warn(\"getCity: addressArray\", addressArray);\n    let city = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      if (\n        addressArray[i].types[0] &&\n        \"administrative_area_level_2\" === addressArray[i].types[0]\n      ) {\n        city = addressArray[i].long_name;\n        return city;\n      }\n    }\n  };\n  /**\n   * Get the area and set the area input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getArea = (addressArray) => {\n    let area = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      if (addressArray[i].types[0]) {\n        for (let j = 0; j < addressArray[i].types.length; j++) {\n          if (\n            \"sublocality_level_1\" === addressArray[i].types[j] ||\n            \"locality\" === addressArray[i].types[j]\n          ) {\n            area = addressArray[i].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Get the address and set the address input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getState = (addressArray) => {\n    let state = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      for (let i = 0; i < addressArray.length; i++) {\n        if (\n          addressArray[i].types[0] &&\n          \"administrative_area_level_1\" === addressArray[i].types[0]\n        ) {\n          state = addressArray[i].long_name;\n          return state;\n        }\n      }\n    }\n  };\n  /**\n   * And function for city,state and address input\n   * @param event\n   */\n  onChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  /**\n   * This Event triggers when the marker window is closed\n   *\n   * @param event\n   */\n  onInfoWindowClose = (event) => {\n    console.warn(\"Infow window has been closed!!!\", event);\n  };\n  /**\n   * When the user types an address in the search box\n   * @param place\n   */\n  onPlaceSelected = (place) => {\n    console.warn(\"place =\", place);\n    const address = place.formatted_address,\n      addressArray = place.address_components,\n      city = this.getCity(addressArray),\n      area = this.getArea(addressArray),\n      state = this.getState(addressArray),\n      latValue = place.geometry.location.lat(),\n      lngValue = place.geometry.location.lng();\n    // Set these values in the state.\n    this.setState({\n      address: address ? address : \"\",\n      area: area ? area : \"\",\n      city: city ? city : \"\",\n      state: state ? state : \"\",\n      markerPosition: {\n        lat: latValue,\n        lng: lngValue,\n      },\n      mapPosition: {\n        lat: latValue,\n        lng: lngValue,\n      },\n    });\n  };\n  /**\n   * When the marker is dragged you get the lat and long using the functions available from event object.\n   * Use geocode to get the address, city, area and state from the lat and lng positions.\n   * And then set those values in the state.\n   *\n   * @param event\n   */\n  onMarkerDragEnd = (event) => {\n    console.log(\"event\", event);\n    let newLat = event.latLng.lat(),\n      newLng = event.latLng.lng(),\n      addressArray = [];\n    Geocode.fromLatLng(newLat, newLng).then(\n      (response) => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\",\n        });\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  };\n  render() {\n    const AsyncMap = withScriptjs(\n      withGoogleMap((props) => (\n        <GoogleMap\n          google={this.props.google}\n          defaultZoom={this.props.zoom}\n          defaultCenter={{\n            lat: this.state.mapPosition.lat,\n            lng: this.state.mapPosition.lng,\n          }}\n        >\n          <Marker\n            google={this.props.google}\n            name={\"Dolores park\"}\n            draggable={true}\n            onDragEnd={this.onMarkerDragEnd}\n            position={{\n              lat: this.state.markerPosition.lat,\n              lng: this.state.markerPosition.lng,\n            }}\n          />\n          <Marker />\n          <InfoWindow\n            onClose={this.onInfoWindowClose}\n            position={{\n              lat: this.state.markerPosition.lat + 0.0018,\n              lng: this.state.markerPosition.lng,\n            }}\n          >\n            <div>\n              <span style={{ padding: 0, margin: 0, color: \"black\" }}>\n                {this.state.address}\n              </span>\n            </div>\n          </InfoWindow>\n        </GoogleMap>\n      ))\n    );\n    let map;\n    if (this.props.center.lat !== undefined) {\n      map = (\n        <div className=\"col\">\n          <AsyncMap\n            googleMapURL={\n              \"https://maps.googleapis.com/maps/api/js?key=\" +\n              process.env.REACT_APP_API_KEY +\n              \"&libraries=places\"\n            }\n            loadingElement={<div style={{ height: `100%` }} />}\n            containerElement={\n              <div style={{ height: this.props.height, width: `100%` }} />\n            }\n            mapElement={<div style={{ height: `100%` }} />}\n          />\n          <div style={{ marginTop: `50px`, marginBottom: `50px` }}>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">City</label>\n              <input\n                type=\"text\"\n                name=\"city\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.city}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">Area</label>\n              <input\n                type=\"text\"\n                name=\"area\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.area}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">State</label>\n              <input\n                type=\"text\"\n                name=\"state\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.state}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">Address</label>\n              <input\n                type=\"text\"\n                name=\"address\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.address}\n              />\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      map = <div style={{ height: this.props.height }} />;\n    }\n    return map;\n  }\n}\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}