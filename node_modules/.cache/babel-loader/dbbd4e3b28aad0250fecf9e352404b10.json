{"ast":null,"code":"var _jsxFileName = \"/Users/williamvennard/my-app/src/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      console.warn(\"getCity: addressArray\", addressArray);\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n    * Get the city and set the city input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }))), React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height,\n            width: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/williamvennard/my-app/src/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","Component","constructor","props","getCity","addressArray","console","warn","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","address_components","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","log","newLat","latLng","newLng","fromLatLng","then","response","results","error","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","padding","margin","map","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I\");\nGeocode.enableDebug();\n\nclass Map extends React.Component{\n  constructor(props){\n    super( props );\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n    }\n  }\n}\n/**\n  * Get the current address from the default map position and set those values in the state\n  */\n componentDidMount() {\n  Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n   response => {\n    const address = response.results[0].formatted_address,\n     addressArray =  response.results[0].address_components,\n     city = this.getCity( addressArray ),\n     area = this.getArea( addressArray ),\n     state = this.getState( addressArray );\n  \n    console.log( 'city', city, area, state );\n  \n    this.setState( {\n     address: ( address ) ? address : '',\n     area: ( area ) ? area : '',\n     city: ( city ) ? city : '',\n     state: ( state ) ? state : '',\n    } )\n   },\n   error => {\n    console.error(error);\n   }\n  );\n };\n/**\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n  *\n  * @param nextProps\n  * @param nextState\n  * @return {boolean}\n  */\n shouldComponentUpdate( nextProps, nextState ){\n  if (\n   this.state.markerPosition.lat !== this.props.center.lat ||\n   this.state.address !== nextState.address ||\n   this.state.city !== nextState.city ||\n   this.state.area !== nextState.area ||\n   this.state.state !== nextState.state\n  ) {\n   return true\n  } else if ( this.props.center.lat === nextProps.center.lat ){\n   return false\n  }\n }\n/**\n  * Get the city and set the city input value to the one selected\n  *\n  * @param addressArray\n  * @return {string}\n  */\n getCity = ( addressArray ) => {\n  console.warn(\"getCity: addressArray\", addressArray)\n  let city = '';\n  for( let i = 0; i < addressArray.length; i++ ) {\n   if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\n    city = addressArray[ i ].long_name;\n    return city;\n   }\n  }\n };\n/**\n  * Get the area and set the area input value to the one selected\n  *\n  * @param addressArray\n  * @return {string}\n  */\n getArea = ( addressArray ) => {\n  let area = '';\n  for( let i = 0; i < addressArray.length; i++ ) {\n   if ( addressArray[ i ].types[0]  ) {\n    for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n     if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n      area = addressArray[ i ].long_name;\n      return area;\n     }\n    }\n   }\n  }\n };\n/**\n  * Get the address and set the address input value to the one selected\n  *\n  * @param addressArray\n  * @return {string}\n  */\n getState = ( addressArray ) => {\n  let state = '';\n  for( let i = 0; i < addressArray.length; i++ ) {\n   for( let i = 0; i < addressArray.length; i++ ) {\n    if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\n     state = addressArray[ i ].long_name;\n     return state;\n    }\n   }\n  }\n };\n/**\n  * And function for city,state and address input\n  * @param event\n  */\n onChange = ( event ) => {\n  this.setState({ [event.target.name]: event.target.value });\n };\n/**\n  * This Event triggers when the marker window is closed\n  *\n  * @param event\n  */\n onInfoWindowClose = ( event ) => {\n};\n/**\n  * When the user types an address in the search box\n  * @param place\n  */\n onPlaceSelected = ( place ) => {\nconst address = place.formatted_address,\n   addressArray =  place.address_components,\n   city = this.getCity( addressArray ),\n   area = this.getArea( addressArray ),\n   state = this.getState( addressArray ),\n   latValue = place.geometry.location.lat(),\n   lngValue = place.geometry.location.lng();\n// Set these values in the state.\n  this.setState({\n   address: ( address ) ? address : '',\n   area: ( area ) ? area : '',\n   city: ( city ) ? city : '',\n   state: ( state ) ? state : '',\n   markerPosition: {\n    lat: latValue,\n    lng: lngValue\n   },\n   mapPosition: {\n    lat: latValue,\n    lng: lngValue\n   },\n  })\n };\n/**\n  * When the marker is dragged you get the lat and long using the functions available from event object.\n  * Use geocode to get the address, city, area and state from the lat and lng positions.\n  * And then set those values in the state.\n  *\n  * @param event\n  */\n onMarkerDragEnd = ( event ) => {\n  console.log( 'event', event );\n  let newLat = event.latLng.lat(),\n   newLng = event.latLng.lng(),\n   addressArray = [];\nGeocode.fromLatLng( newLat , newLng ).then(\n   response => {\n    const address = response.results[0].formatted_address,\n     addressArray =  response.results[0].address_components,\n     city = this.getCity( addressArray ),\n     area = this.getArea( addressArray ),\n     state = this.getState( addressArray );\nthis.setState( {\n     address: ( address ) ? address : '',\n     area: ( area ) ? area : '',\n     city: ( city ) ? city : '',\n     state: ( state ) ? state : ''\n    } )\n   },\n   error => {\n    console.error(error);\n   }\n  );\n };\nrender(){\nconst AsyncMap = withScriptjs(\n   withGoogleMap(\n    props => (\n     <GoogleMap google={this.props.google}\n      defaultZoom={this.props.zoom}\n      defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n     >\n      {/* For Auto complete Search Box */}\n      <Autocomplete\n       style={{\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n       }}\n       onPlaceSelected={ this.onPlaceSelected }\n       types={['(regions)']}\n      />\n{/*Marker*/}\n      <Marker google={this.props.google}\n       name={'Dolores park'}\n          draggable={true}\n          onDragEnd={ this.onMarkerDragEnd }\n             position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n      />\n      <Marker />\n{/* InfoWindow on top of marker */}\n      <InfoWindow\n       onClose={this.onInfoWindowClose}\n       position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\n      >\n       <div>\n        <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\n       </div>\n      </InfoWindow>\n</GoogleMap>\n)\n   )\n  );\nlet map;\n  if( this.props.center.lat !== undefined ) {\n   map = <div>\n     <div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">City</label>\n       <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n      </div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">Area</label>\n       <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n      </div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">State</label>\n       <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n      </div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">Address</label>\n       <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n      </div>\n     </div>\n     <AsyncMap\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I&libraries=places\"\n      loadingElement={\n       <div style={{ height: `100%` }} />\n      }\n      containerElement={\n       <div style={{ height: this.props.height, width: `100%` }} />\n      }\n      mapElement={\n       <div style={{ height: `100%` }} />\n      }\n     />\n    </div>\n} else {\n   map = <div style={{ height: this.props.height }} />\n  }\n  return( map )\n }\n}\nexport default Map\n"]},"metadata":{},"sourceType":"module"}