{"ast":null,"code":"var _jsxFileName = \"/Users/williamvennard/my-app/src/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      console.warn(\"getCity: addressArray\", addressArray);\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {\n      console.warn(\"Infow window has been closed!!!\", event);\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n\n\n  componentDidMount() {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      let that = this;\n      navigator.geolocation.getCurrentPosition(function (position) {\n        let currentPos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        that.next(currentPos);\n        console.warn(\"getCurrentPosition: currentPos = \", currentPos);\n      }, function () {\n        console.warn(\"getCurrentPosition: Error!\");\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      console.warn(\"Browser doesn't support Geolocation\");\n    }\n  }\n\n  next(pos) {\n    Geocode.fromLatLng(pos.lat, pos.lng).then( // Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n    response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n    * Get the city and set the city input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0,\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height,\n            width: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          'marginTop': `50px`,\n          'marginBottom': `50px`\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }))));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/williamvennard/my-app/src/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","Component","constructor","props","getCity","addressArray","console","warn","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","onMarkerDragEnd","log","newLat","latLng","lat","newLng","lng","fromLatLng","then","response","address","results","formatted_address","address_components","error","mapPosition","center","markerPosition","componentDidMount","navigator","geolocation","that","getCurrentPosition","position","currentPos","coords","latitude","longitude","next","pos","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","onPlaceSelected","padding","margin","color","map","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I\");\nGeocode.enableDebug();\n\nclass Map extends React.Component{\n  constructor(props){\n    super( props );\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    }\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n  componentDidMount() {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      let that = this;\n      navigator.geolocation.getCurrentPosition(function(position) {\n        let currentPos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        that.next(currentPos)\n        console.warn(\"getCurrentPosition: currentPos = \", currentPos)\n      }, function() {\n        console.warn(\"getCurrentPosition: Error!\")\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      console.warn(\"Browser doesn't support Geolocation\")\n    }\n\n    \n  };\n\n  next(pos) {\n    Geocode.fromLatLng( pos.lat , pos.lng ).then(\n    // Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n      response => {\n        const address = response.results[0].formatted_address,\n        addressArray =  response.results[0].address_components,\n        city = this.getCity( addressArray ),\n        area = this.getArea( addressArray ),\n        state = this.getState( addressArray );\n        console.log( 'city', city, area, state );\n    \n        this.setState( {\n          address: ( address ) ? address : '',\n          area: ( area ) ? area : '',\n          city: ( city ) ? city : '',\n          state: ( state ) ? state : '',\n        } )\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate( nextProps, nextState ){\n    if (\n      this.state.markerPosition.lat !== this.props.center.lat ||\n      this.state.address !== nextState.address ||\n      this.state.city !== nextState.city ||\n      this.state.area !== nextState.area ||\n      this.state.state !== nextState.state\n    ) {\n      return true\n    } else if ( this.props.center.lat === nextProps.center.lat ){\n      return false\n    }\n  }\n  /**\n    * Get the city and set the city input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getCity = ( addressArray ) => {\n    console.warn(\"getCity: addressArray\", addressArray)\n    let city = '';\n    for( let i = 0; i < addressArray.length; i++ ) {\n      if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\n        city = addressArray[ i ].long_name;\n        return city;\n      }\n    }\n  };\n  /**\n    * Get the area and set the area input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getArea = ( addressArray ) => {\n    let area = '';\n    for( let i = 0; i < addressArray.length; i++ ) {\n      if ( addressArray[ i ].types[0]  ) {\n        for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n          if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n            area = addressArray[ i ].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n  /**\n    * Get the address and set the address input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getState = ( addressArray ) => {\n    let state = '';\n    for( let i = 0; i < addressArray.length; i++ ) {\n      for( let i = 0; i < addressArray.length; i++ ) {\n        if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\n          state = addressArray[ i ].long_name;\n          return state;\n        }\n      }\n    }\n  };\n  /**\n    * And function for city,state and address input\n    * @param event\n    */\n  onChange = ( event ) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  /**\n    * This Event triggers when the marker window is closed\n    *\n    * @param event\n    */\n  onInfoWindowClose = ( event ) => {\n    console.warn(\"Infow window has been closed!!!\", event)\n  };\n  /**\n    * When the user types an address in the search box\n    * @param place\n    */\n  // onPlaceSelected = ( place ) => {\n  //   console.warn(\"place =\", place)\n  //   const address = place.formatted_address,\n  //   addressArray =  place.address_components,\n  //   city = this.getCity( addressArray ),\n  //   area = this.getArea( addressArray ),\n  //   state = this.getState( addressArray ),\n  //   latValue = place.geometry.location.lat(),\n  //   lngValue = place.geometry.location.lng();\n  //   // Set these values in the state.\n  //   this.setState({\n  //     address: ( address ) ? address : '',\n  //     area: ( area ) ? area : '',\n  //     city: ( city ) ? city : '',\n  //     state: ( state ) ? state : '',\n  //     markerPosition: {\n  //     lat: latValue,\n  //     lng: lngValue\n  //   },\n  //     mapPosition: {\n  //       lat: latValue,\n  //       lng: lngValue\n  //     },\n  //   })\n  // };\n  /**\n    * When the marker is dragged you get the lat and long using the functions available from event object.\n    * Use geocode to get the address, city, area and state from the lat and lng positions.\n    * And then set those values in the state.\n    *\n    * @param event\n    */\n  onMarkerDragEnd = ( event ) => {\n    console.log( 'event', event );\n    let newLat = event.latLng.lat(),\n    newLng = event.latLng.lng(),\n    addressArray = [];\n    Geocode.fromLatLng( newLat , newLng ).then(\n      response => {\n        const address = response.results[0].formatted_address,\n        addressArray =  response.results[0].address_components,\n        city = this.getCity( addressArray ),\n        area = this.getArea( addressArray ),\n        state = this.getState( addressArray );\n        this.setState( {\n          address: ( address ) ? address : '',\n          area: ( area ) ? area : '',\n          city: ( city ) ? city : '',\n          state: ( state ) ? state : ''\n        } )\n      },\n     error => {\n      console.error(error);\n     }\n    );\n  };\n  render(){\n    const AsyncMap = withScriptjs(\n      withGoogleMap(\n        props => (\n          <GoogleMap google={ this.props.google }\n            defaultZoom={ this.props.zoom }\n            defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n          >\n            <Autocomplete\n             style={{\n              width: '100%',\n              height: '40px',\n              paddingLeft: '16px',\n              marginTop: '2px',\n              marginBottom: '100px'\n             }}\n             onPlaceSelected={ this.onPlaceSelected }\n             types={['(regions)']}\n            />\n\n            <Marker \n              google={ this.props.google }\n              name={'Dolores park'}\n              draggable={true}\n              onDragEnd={ this.onMarkerDragEnd }\n              position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n            />\n            <Marker />\n            <InfoWindow\n              onClose={ this.onInfoWindowClose }\n              position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\n            >\n              <div>\n                <span style={{ padding: 0, margin: 0, color: 'black'}}>{ this.state.address }</span>\n              </div>\n            </InfoWindow>\n          </GoogleMap>\n        )\n      )\n    );\n    let map;\n    if( this.props.center.lat !== undefined ) {\n      map = <div className=\"col\">\n        <AsyncMap\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb__W3DvdpBLKSoN6AuMzNZtcrcurvK0I&libraries=places\"\n          loadingElement={\n            <div style={{ height: `100%` }} />\n          }\n          containerElement={\n            <div style={{ height: this.props.height, width: `100%` }} />\n          }\n          mapElement={\n            <div style={{ height: `100%` }} />\n          }\n        />\n        <div style={{ 'marginTop': `50px`, 'marginBottom': `50px` }}>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">City</label>\n            <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">Area</label>\n            <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">State</label>\n            <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">Address</label>\n            <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n          </div>\n        </div>\n      </div>\n    } else {\n      map = <div style={{ height: this.props.height }} />\n    }\n    return( map )\n  }\n}\nexport default Map\n"]},"metadata":{},"sourceType":"module"}